{"version":3,"file":"big-decimal.js","sources":["../../../src/add.ts","../../../src/abs.ts","../../../src/roundingModes.ts","../../../src/round.ts","../../../src/multiply.ts","../../../src/divide.ts","../../../src/subtract.ts","../../../src/modulus.ts","../../../src/compareTo.ts","../../../src/big-decimal.ts"],"sourcesContent":["//function add {\nexport function add(number1: string, number2 = \"0\") {\n  let neg = 0,\n    ind = -1,\n    neg_len;\n\n  //check for negatives\n  if (number1[0] == \"-\") {\n    number1 = number1.substring(1);\n    if (!testZero(number1)) {\n      neg++;\n      ind = 1;\n      neg_len = number1.length;\n    }\n  }\n  if (number2[0] == \"-\") {\n    number2 = number2.substring(1);\n    if (!testZero(number2)) {\n      neg++;\n      ind = 2;\n      neg_len = number2.length;\n    }\n  }\n\n  number1 = trim(number1);\n  number2 = trim(number2);\n\n  [number1, number2] = pad(trim(number1), trim(number2));\n\n  if (neg == 1) {\n    if (ind === 1) number1 = compliment(number1);\n    else if (ind === 2) number2 = compliment(number2);\n  }\n\n  let res = addCore(number1, number2);\n  if (!neg) return trim(res);\n  else if (neg == 2) return \"-\" + trim(res);\n  else {\n    if (number1.length < res.length) return trim(res.substring(1));\n    else return \"-\" + trim(compliment(res));\n  }\n}\n\nfunction compliment(number: string) {\n  if (testZero(number)) {\n    return number;\n  }\n\n  let s = \"\",\n    l = number.length,\n    dec = number.split(\".\")[1],\n    ld = dec ? dec.length : 0;\n\n  for (let i = 0; i < l; i++) {\n    if (number[i] >= \"0\" && number[i] <= \"9\") s += 9 - parseInt(number[i]);\n    else s += number[i];\n  }\n\n  let one = ld > 0 ? \"0.\" + new Array(ld).join(\"0\") + \"1\" : \"1\";\n\n  return addCore(s, one);\n}\n\nexport function trim(number: string) {\n  let parts = number.split(\".\");\n\n  if (!parts[0]) parts[0] = \"0\";\n\n  while (parts[0][0] == \"0\" && parts[0].length > 1)\n    parts[0] = parts[0].substring(1);\n\n  return parts[0] + (parts[1] ? \".\" + parts[1] : \"\");\n}\n\nexport function pad(number1: string, number2: string) {\n  let parts1 = number1.split(\".\"),\n    parts2 = number2.split(\".\");\n\n  //pad integral part\n  let length1 = parts1[0].length,\n    length2 = parts2[0].length;\n  if (length1 > length2) {\n    parts2[0] =\n      new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\n      (parts2[0] ? parts2[0] : \"\");\n  } else {\n    parts1[0] =\n      new Array(Math.abs(length1 - length2) + 1).join(\"0\") +\n      (parts1[0] ? parts1[0] : \"\");\n  }\n\n  //pad fractional part\n  (length1 = parts1[1] ? parts1[1].length : 0),\n    (length2 = parts2[1] ? parts2[1].length : 0);\n  if (length1 || length2) {\n    if (length1 > length2) {\n      parts2[1] =\n        (parts2[1] ? parts2[1] : \"\") +\n        new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n    } else {\n      parts1[1] =\n        (parts1[1] ? parts1[1] : \"\") +\n        new Array(Math.abs(length1 - length2) + 1).join(\"0\");\n    }\n  }\n\n  number1 = parts1[0] + (parts1[1] ? \".\" + parts1[1] : \"\");\n  number2 = parts2[0] + (parts2[1] ? \".\" + parts2[1] : \"\");\n\n  return [number1, number2];\n}\n\nfunction addCore(number1: string, number2: string) {\n  [number1, number2] = pad(number1, number2);\n\n  let sum = \"\",\n    carry = 0;\n\n  for (let i = number1.length - 1; i >= 0; i--) {\n    if (number1[i] === \".\") {\n      sum = \".\" + sum;\n      continue;\n    }\n    let temp = parseInt(number1[i]) + parseInt(number2[i]) + carry;\n    sum = (temp % 10) + sum;\n    carry = Math.floor(temp / 10);\n  }\n\n  return carry ? carry.toString() + sum : sum;\n}\n\nfunction testZero(number: string) {\n  return /^0[0]*[.]{0,1}[0]*$/.test(number);\n}\n","export function abs(n: number | string | bigint) {\n  if (typeof n == \"number\" || typeof n == \"bigint\") n = n.toString();\n  if (n[0] == \"-\") return n.substring(1);\n  return n;\n}\n","export enum RoundingModes {\n    /**\n     * Rounding mode to round towards positive infinity.\n     */\n    CEILING,\n\n    /**\n     * Rounding mode to round towards zero.\n     */\n    DOWN,\n\n    /**\n     * Rounding mode to round towards negative infinity.\n     */\n    FLOOR,\n\n    /**\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \n     * in which case round down.\n     */\n    HALF_DOWN,\n\n    /**\n     * Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant, \n     * in which case, round towards the even neighbor.\n     */\n    HALF_EVEN,\n\n    /**\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \n     * in which case round up.\n     */\n    HALF_UP,\n\n    /**\n     * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.\n     * UNIMPLEMENTED\n     */\n    UNNECESSARY,\n\n    /**\n     * Rounding mode to round away from zero.\n     */\n    UP\n}\n\n","import { RoundingModes } from './roundingModes';\n/**\n * \n * @param input the number to round\n * @param n precision\n * @param mode Rounding Mode\n */\nexport function roundOff(input: number | string | bigint, n: number = 0, mode=RoundingModes.HALF_EVEN) {\n    if (mode === RoundingModes.UNNECESSARY) {\n        throw new Error(\"UNNECESSARY Rounding Mode has not yet been implemented\");\n    }\n\n    if (typeof (input) == 'number' || typeof (input) == 'bigint')\n        input = input.toString();\n\n    let neg = false;\n    if (input[0] === '-') {\n        neg = true;\n        input = input.substring(1);\n    }\n\n    let parts = input.split('.'),\n        partInt = parts[0],\n        partDec = parts[1];\n\n    //handle case of -ve n: roundOff(12564,-2)=12600\n    if (n < 0) {\n        n = -n;\n        if (partInt.length <= n)\n            return '0';\n        else {\n            let prefix = partInt.substr(0, partInt.length - n);\n            input = prefix + '.' + partInt.substr(partInt.length - n) + partDec;\n            prefix = roundOff(input, 0, mode);\n            return (neg ? '-' : '') + prefix + (new Array(n + 1).join('0'));\n        }\n    }\n\n\n    // handle case when integer output is desired\n    if (n == 0) {\n        let l = partInt.length;\n        if (greaterThanFive(parts[1], partInt, neg, mode)) {\n            partInt = increment(partInt);\n        }\n        return (neg&&parseInt(partInt) ? '-' : '') + partInt;\n    }\n\n\n    // handle case when n>0\n    if (!parts[1]) {\n        return (neg ? '-' : '') + partInt + '.' + (new Array(n + 1).join('0'));\n    } else if (parts[1].length < n) {\n        return (neg ? '-' : '') + partInt + '.' + parts[1] + (new Array(n - parts[1].length + 1).join('0'));\n    }\n\n    partDec = parts[1].substring(0, n);\n    let rem = parts[1].substring(n);\n\n    if (rem && greaterThanFive(rem, partDec, neg, mode)) {\n        partDec = increment(partDec);\n        if (partDec.length > n) {\n            return (neg ? '-' : '') + increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\n        }\n    }\n    return (neg&&(parseInt(partInt) || parseInt(partDec)) ? '-' : '') + partInt + '.' + partDec;\n}\n\nfunction greaterThanFive(part: string, pre: string, neg: boolean, mode: RoundingModes) {\n    if (!part || part === new Array(part.length + 1).join('0'))\n        return false;\n\n    // #region UP, DOWN, CEILING, FLOOR \n    if (mode === RoundingModes.DOWN || (!neg && mode === RoundingModes.FLOOR) ||\n        (neg && mode === RoundingModes.CEILING))\n        return false;\n\n    if (mode === RoundingModes.UP || (neg && mode === RoundingModes.FLOOR) ||\n        (!neg && mode === RoundingModes.CEILING))\n        return true;\n    // #endregion\n\n    // case when part !== five\n    let five = '5' + (new Array(part.length).join('0'));\n    if (part > five)\n        return true;\n    else if (part < five)\n        return false;\n\n    // case when part === five\n    switch (mode) {\n        case RoundingModes.HALF_DOWN: return false;\n        case RoundingModes.HALF_UP: return true;\n        case RoundingModes.HALF_EVEN:\n        default: return (parseInt(pre[pre.length - 1]) % 2 == 1)\n    }\n}\n\nfunction increment(part, c: number = 0) {\n    if (!c)\n        c = 1;\n    if (typeof (part) == 'number')\n        part.toString();\n\n    let l = part.length - 1,\n        s = '';\n\n    for (let i = l; i >= 0; i--) {\n        let x = parseInt(part[i]) + c;\n        if (x == 10) {\n            c = 1; x = 0;\n        } else {\n            c = 0;\n        }\n        s += x;\n    }\n    if (c)\n        s += c;\n\n    return s.split('').reverse().join('');\n}","export function multiply(number1, number2) {\n\tnumber1 = number1.toString();\n\tnumber2 = number2.toString();\n\n\t/*Filter numbers*/\n\tlet negative = 0;\n\tif (number1[0] == '-') {\n\t\tnegative++;\n\t\tnumber1 = number1.substr(1);\n\t}\n\tif (number2[0] == '-') {\n\t\tnegative++;\n\t\tnumber2 = number2.substr(1);\n\t}\n\tnumber1 = trailZero(number1);\n\tnumber2 = trailZero(number2);\n\tlet decimalLength1 = 0;\n\tlet decimalLength2 = 0;\n\n\tif (number1.indexOf('.') != -1) {\n\t\tdecimalLength1 = number1.length - number1.indexOf('.') - 1;\n\t}\n\n\tif (number2.indexOf('.') != -1) {\n\t\tdecimalLength2 = number2.length - number2.indexOf('.') - 1;\n\t}\n\tlet decimalLength = decimalLength1 + decimalLength2;\n\tnumber1 = trailZero(number1.replace('.', ''));\n\tnumber2 = trailZero(number2.replace('.', ''));\n\n\tif (number1.length < number2.length) {\n\t\tlet temp = number1;\n\t\tnumber1 = number2;\n\t\tnumber2 = temp;\n\t}\n\n\tif (number2 == '0') {\n\t\treturn '0';\n\t}\n\n\t/*\n\t* Core multiplication\n\t*/\n\tlet length = number2.length;\n\tlet carry = 0;\n\tlet positionVector = [];\n\tlet currentPosition = length - 1;\n\n\tlet result = \"\";\n\tfor (let i = 0; i < length; i++) {\n\t\tpositionVector[i] = number1.length - 1;\n\t}\n\tfor (let i = 0; i < 2 * number1.length; i++) {\n\t\tlet sum = 0;\n\t\tfor (let j = number2.length - 1; j >= currentPosition && j >= 0; j--) {\n\t\t\tif (positionVector[j] > -1 && positionVector[j] < number1.length) {\n\t\t\t\tsum += parseInt(number1[positionVector[j]--]) * parseInt(number2[j]);\n\t\t\t}\n\t\t}\n\t\tsum += carry;\n\t\tcarry = Math.floor(sum / 10);\n\t\tresult = sum % 10 + result;\n\t\tcurrentPosition--;\n\t}\n\t/*\n\t* Formatting result\n\t*/\n\tresult = trailZero(adjustDecimal(result, decimalLength));\n\tif (negative == 1) {\n\t\tresult = '-' + result;\n\t}\n\treturn result;\n}\n\n/*\n* Add decimal point\n*/\nfunction adjustDecimal(number, decimal) {\n\tif (decimal == 0)\n\t\treturn number;\n\telse {\n\t\tnumber = (decimal >= number.length) ? ((new Array(decimal - number.length + 1)).join('0') + number) : number;\n\t\treturn number.substr(0, number.length - decimal) + '.' + number.substr(number.length - decimal, decimal)\n\t}\n}\n\n/*\n* Removes zero from front and back*/\nfunction trailZero(number) {\n\twhile (number[0] == '0') {\n\t\tnumber = number.substr(1);\n\t}\n\tif (number.indexOf('.') != -1) {\n\t\twhile (number[number.length - 1] == '0') {\n\t\t\tnumber = number.substr(0, number.length - 1);\n\t\t}\n\t}\n\tif (number == \"\" || number == \".\") {\n\t\tnumber = '0';\n\t} else if (number[number.length - 1] == '.') {\n\t\tnumber = number.substr(0, number.length - 1);\n\t}\n\tif (number[0] == '.') {\n\t\tnumber = '0' + number;\n\t}\n\treturn number;\n}","import { add, trim } from './add';\nimport { roundOff } from './round';\n\nexport function divide(dividend, divisor, precission = 8) {\n    if (divisor == 0) {\n        throw new Error('Cannot divide by 0');\n    }\n\n    dividend = dividend.toString();\n    divisor = divisor.toString();\n\n    // remove trailing zeros in decimal ISSUE#18\n    dividend = dividend.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n    divisor = divisor.replace(/(\\.\\d*?[1-9])0+$/g, \"$1\").replace(/\\.0+$/, \"\");\n\n    if (dividend == 0)\n        return '0';\n\n    let neg = 0;\n    if (divisor[0] == '-') {\n        divisor = divisor.substring(1);\n        neg++;\n    }\n    if (dividend[0] == '-') {\n        dividend = dividend.substring(1);\n        neg++;\n    }\n\n    var pt_dvsr = divisor.indexOf('.') > 0 ? divisor.length - divisor.indexOf('.') - 1 : -1;\n\n    divisor = trim(divisor.replace('.', ''));\n    if (pt_dvsr >= 0) {\n        let pt_dvnd = dividend.indexOf('.') > 0 ? dividend.length - dividend.indexOf('.') - 1 : -1;\n\n        if (pt_dvnd == -1) {\n            dividend = trim(dividend + (new Array(pt_dvsr + 1)).join('0'));\n        } else {\n            if (pt_dvsr > pt_dvnd) {\n                dividend = dividend.replace('.', '');\n                dividend = trim(dividend + (new Array(pt_dvsr - pt_dvnd + 1)).join('0'));\n            } else if (pt_dvsr < pt_dvnd) {\n                dividend = dividend.replace('.', '');\n                let loc = dividend.length - pt_dvnd + pt_dvsr;\n                dividend = trim(dividend.substring(0, loc) + '.' + dividend.substring(loc));\n            } else if (pt_dvsr == pt_dvnd) {\n                dividend = trim(dividend.replace('.', ''));\n            }\n        }\n    }\n\n    let prec = 0, dl = divisor.length, rem = '0', quotent = '';\n    let dvnd = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(0, dl + 1) : dividend.substring(0, dl);\n    dividend = (dividend.indexOf('.') > -1 && dividend.indexOf('.') < dl) ? dividend.substring(dl + 1) : dividend.substring(dl);\n    \n    if (dvnd.indexOf('.') > -1) {\n        let shift = dvnd.length - dvnd.indexOf('.') - 1;\n        dvnd = dvnd.replace('.', '');\n        if (dl > dvnd.length) {\n            shift += dl - dvnd.length;\n            dvnd = dvnd + (new Array(dl - dvnd.length + 1)).join('0');\n        }\n        prec = shift;\n        quotent = '0.' + (new Array(shift)).join('0');\n\n    }\n\n    precission = precission + 2;\n\n    while (prec <= precission) {\n        let qt = 0;\n        while (parseInt(dvnd) >= parseInt(divisor)) {\n            dvnd = add(dvnd, '-' + divisor);\n            qt++;\n        }\n        quotent += qt;\n\n        if (!dividend) {\n            if (!prec)\n                quotent += '.';\n            prec++;\n            dvnd = dvnd + '0';\n        } else {\n            if (dividend[0] == '.') {\n                quotent += '.';\n                prec++;\n                dividend = dividend.substring(1);\n            }\n            dvnd = dvnd + dividend.substring(0, 1);\n            dividend = dividend.substring(1);\n        }\n    }\n\n    return ((neg == 1) ? '-' : '') + trim(roundOff(quotent, precission - 2));\n}","import { add } from './add';\r\n\r\nexport function subtract(number1, number2) {\r\n\tnumber1 = number1.toString();\r\n\tnumber2 = number2.toString();\r\n\tnumber2 = negate(number2);\r\n\treturn add(number1, number2);\r\n}\r\n\r\nexport function negate(number : string){\r\n\tif(number[0] == '-'){\r\n\t\tnumber = number.substr(1);\r\n\t}else{\r\n\t\tnumber = '-' + number;\r\n\t}\r\n\treturn number;\r\n}","import { divide } from './divide';\nimport { roundOff } from './round';\nimport { multiply } from './multiply';\nimport { subtract } from './subtract';\nimport { RoundingModes } from './roundingModes';\n\nexport function modulus(dividend: number|string, divisor:number|string) {\n    if (divisor == 0) {\n        throw new Error('Cannot divide by 0');\n    }\n\n    dividend = dividend.toString();\n    divisor = divisor.toString();\n\n    validate(dividend);\n    validate(divisor);\n\n    let sign = '';\n    if(dividend[0] == '-'){\n        sign = '-';\n        dividend = dividend.substr(1);\n    }\n    if(divisor[0] == '-'){\n        divisor = divisor.substr(1);\n    }\n\n    let result = subtract(dividend, multiply(divisor, roundOff(divide(dividend, divisor), 0, RoundingModes.FLOOR)));\n    return sign+result;\n}\n\nfunction validate(oparand: string) {\n    if (oparand.indexOf('.') != -1) {\n        throw new Error('Modulus of non-integers not supported');\n    }\n}\n","import { pad } from './add';\r\n\r\nexport function compareTo(number1 : string, number2 : string) {\r\n\tlet negative = false;\r\n\tif(number1[0] == '-' && number2[0] != \"-\"){\r\n\t\treturn -1;\r\n\t}else if(number1[0] != '-' && number2[0] == '-'){\r\n\t\treturn 1;\r\n\t}else if(number1[0] == '-' && number2[0] == '-'){\r\n\t\tnumber1 = number1.substr(1);\r\n\t\tnumber2 = number2.substr(1);\r\n\t\tnegative = true;\r\n\t}\r\n\t[number1, number2] = pad(number1, number2);\r\n\tif(number1.localeCompare(number2) == 0){\r\n\t\treturn 0;\r\n\t}\r\n\tfor(let i = 0 ; i < number1.length ; i++){\r\n\t\tif(number1[i] == number2[i]){\r\n\t\t\tcontinue;\r\n\t\t}else if(number1[i] > number2[i]){\r\n\t\t\tif(negative){\r\n\t\t\t\treturn -1;\r\n\t\t\t}else{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(negative){\r\n\t\t\t\treturn 1;\r\n\t\t\t}else{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}","import { add, trim } from \"./add\";\r\nimport { abs } from \"./abs\";\r\nimport { roundOff } from \"./round\";\r\nimport { multiply } from \"./multiply\";\r\nimport { divide } from \"./divide\";\r\nimport { modulus } from \"./modulus\";\r\nimport { compareTo } from \"./compareTo\";\r\nimport { subtract, negate } from \"./subtract\";\r\nimport { RoundingModes as Modes, RoundingModes } from \"./roundingModes\";\r\n\r\nclass bigDecimal {\r\n  private value: string;\r\n  static RoundingModes = Modes;\r\n\r\n  private static validate(number): string {\r\n    if (number) {\r\n      number = number.toString();\r\n      if (isNaN(number)) throw Error(\"Parameter is not a number: \" + number);\r\n\r\n      if (number[0] == \"+\") number = number.substring(1);\r\n    } else number = \"0\";\r\n\r\n    //handle missing leading zero\r\n    if (number.startsWith(\".\")) number = \"0\" + number;\r\n    else if (number.startsWith(\"-.\")) number = \"-0\" + number.substr(1);\r\n\r\n    //handle exponentiation\r\n    if (/e/i.test(number)) {\r\n      let [mantisa, exponent] = number.split(/[eE]/);\r\n      mantisa = trim(mantisa);\r\n\r\n      let sign = \"\";\r\n      if (mantisa[0] == \"-\") {\r\n        sign = \"-\";\r\n        mantisa = mantisa.substring(1);\r\n      }\r\n\r\n      if (mantisa.indexOf(\".\") >= 0) {\r\n        exponent = parseInt(exponent) + mantisa.indexOf(\".\");\r\n        mantisa = mantisa.replace(\".\", \"\");\r\n      } else {\r\n        exponent = parseInt(exponent) + mantisa.length;\r\n      }\r\n\r\n      if (mantisa.length < exponent) {\r\n        number =\r\n          sign + mantisa + new Array(exponent - mantisa.length + 1).join(\"0\");\r\n      } else if (mantisa.length >= exponent && exponent > 0) {\r\n        number =\r\n          sign +\r\n          trim(mantisa.substring(0, exponent)) +\r\n          (mantisa.length > exponent ? \".\" + mantisa.substring(exponent) : \"\");\r\n      } else {\r\n        number = sign + \"0.\" + new Array(-exponent + 1).join(\"0\") + mantisa;\r\n      }\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  constructor(number: number | string | bigint = \"0\") {\r\n    this.value = bigDecimal.validate(number);\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  setValue(num: number | string | bigint) {\r\n    this.value = bigDecimal.validate(num);\r\n  }\r\n\r\n  static getPrettyValue(number, digits = 3, separator = \",\"): string {\r\n    // if (!(digits || separator)) {\r\n    //     digits = 3;\r\n    //     separator = ',';\r\n    // } else if (!(digits && separator)) {\r\n    //     throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\r\n    // }\r\n    number = bigDecimal.validate(number);\r\n    let neg = number.charAt(0) == \"-\";\r\n    if (neg) number = number.substring(1);\r\n    var len = number.indexOf(\".\");\r\n    len = len > 0 ? len : number.length;\r\n    var temp = \"\";\r\n    for (var i = len; i > 0; ) {\r\n      if (i < digits) {\r\n        digits = i;\r\n        i = 0;\r\n      } else i -= digits;\r\n\r\n      temp =\r\n        number.substring(i, i + digits) +\r\n        (i < len - digits && i >= 0 ? separator : \"\") +\r\n        temp;\r\n    }\r\n    return (neg ? \"-\" : \"\") + temp + number.substring(len);\r\n  }\r\n  getPrettyValue(digits = 3, separator = \",\") {\r\n    return bigDecimal.getPrettyValue(this.value, digits, separator);\r\n  }\r\n\r\n  static round(number, precision = 0, mode = Modes.HALF_EVEN) {\r\n    number = bigDecimal.validate(number);\r\n    // console.log(number)\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n    return roundOff(number, precision, mode);\r\n  }\r\n\r\n  round(precision = 0, mode = Modes.HALF_EVEN) {\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n\r\n    return new bigDecimal(roundOff(this.value, precision, mode));\r\n  }\r\n\r\n  static abs(number) {\r\n    number = bigDecimal.validate(number);\r\n    return abs(number);\r\n  }\r\n\r\n  abs() {\r\n    return new bigDecimal(abs(this.value));\r\n  }\r\n\r\n  static floor(number) {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  floor() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  static ceil(number) {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.CEILING);\r\n  }\r\n\r\n  ceil() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.CEILING);\r\n  }\r\n\r\n  static add(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return add(number1, number2);\r\n  }\r\n\r\n  add(number: bigDecimal) {\r\n    return new bigDecimal(add(this.value, number.getValue()));\r\n  }\r\n\r\n  static subtract(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return subtract(number1, number2);\r\n  }\r\n\r\n  subtract(number: bigDecimal) {\r\n    return new bigDecimal(subtract(this.value, number.getValue()));\r\n  }\r\n\r\n  static multiply(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return multiply(number1, number2);\r\n  }\r\n\r\n  multiply(number: bigDecimal) {\r\n    return new bigDecimal(multiply(this.value, number.getValue()));\r\n  }\r\n\r\n  static divide(number1, number2, precision?: number) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return divide(number1, number2, precision);\r\n  }\r\n\r\n  divide(number: bigDecimal, precision?: number) {\r\n    return new bigDecimal(divide(this.value, number.getValue(), precision));\r\n  }\r\n\r\n  static modulus(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return modulus(number1, number2);\r\n  }\r\n\r\n  modulus(number: bigDecimal) {\r\n    return new bigDecimal(modulus(this.value, number.getValue()));\r\n  }\r\n\r\n  static compareTo(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return compareTo(number1, number2);\r\n  }\r\n\r\n  compareTo(number: bigDecimal) {\r\n    return compareTo(this.value, number.getValue());\r\n  }\r\n\r\n  static negate(number) {\r\n    number = bigDecimal.validate(number);\r\n    return negate(number);\r\n  }\r\n\r\n  negate() {\r\n    return new bigDecimal(negate(this.value));\r\n  }\r\n}\r\nexport default bigDecimal;\r\n"],"names":["Modes"],"mappings":"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"}