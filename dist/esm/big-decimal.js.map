{"version":3,"file":"big-decimal.js","sources":["../../../src/add.ts","../../../src/abs.ts","../../../src/roundingModes.ts","../../../src/stripTrailingZero.ts","../../../src/round.ts","../../../src/compareTo.ts","../../../src/multiply.ts","../../../src/divide.ts","../../../src/subtract.ts","../../../src/validators.ts","../../../src/modulus.ts","../../../src/utils.ts","../../../src/pow.ts","../../../src/constants.ts","../../../src/statistics.ts","../../../src/logarithm.ts","../../../src/trig.ts","../../../src/big-decimal.ts"],"sourcesContent":["export function add(number1: string, number2 = \"0\") {\r\n\r\n  let exponent: number = 0;\r\n  let negativeNumber1: string = '';\r\n  let negativeNumber2: string = '';\r\n  let negativeResult: string = '';\r\n\r\n  //check for negatives\r\n  if (number1[0] == '-') {\r\n    number1 = number1.substring(1);\r\n    if (!testZero(number1))\r\n      negativeNumber1 = '-'\r\n    else return number2;\r\n  }\r\n\r\n  if (number2[0] == '-') {\r\n    number2 = number2.substring(1);\r\n    if (!testZero(number2))\r\n      negativeNumber2 = '-'\r\n    else return negativeNumber1 + number1;\r\n  }\r\n\r\n  ({ number1, number2, exponent } = pad(number1, number2));\r\n\r\n  number1 = negativeNumber1 + number1\r\n  number2 = negativeNumber2 + number2\r\n\r\n  let result = (BigInt(number1) + BigInt(number2)).toString();\r\n\r\n  if (result[0] == '-') {\r\n    result = result.substring(1);\r\n    negativeResult = '-';\r\n  }\r\n\r\n  if (exponent > 0) {\r\n    exponent = result.length - exponent;\r\n    if (exponent < 0) {\r\n      result = result.padStart(result.length + Math.abs(exponent), '0');\r\n      exponent = 0;\r\n    }\r\n\r\n    result = result.slice(0, exponent) + '.' + result.slice(exponent);\r\n  }\r\n\r\n  if (result[0] == '.') result = '0' + result;\r\n  result = negativeResult + result;\r\n\r\n  return result;\r\n}\r\n\r\nexport function pad(number1: string, number2: string) {\r\n\r\n  const length1 = number1.length;\r\n  const length2 = number2.length;\r\n\r\n  let decimalIndex1 = (number1.includes('.')) ? number1.indexOf('.') : length1;\r\n  let decimalLength1 = length1 - decimalIndex1;\r\n\r\n  let decimalIndex2 = (number2.includes('.')) ? number2.indexOf('.') : length2;\r\n  let decimalLength2 = length2 - decimalIndex2;\r\n\r\n  let pad1 = number1.substring(0, decimalIndex1) + number1.substring(decimalIndex1 + 1);\r\n  let pad2 = number2.substring(0, decimalIndex2) + number2.substring(decimalIndex2 + 1);\r\n\r\n  const decimalDifference = decimalLength1 - decimalLength2;\r\n  const decimalLength = Math.max(decimalLength1, decimalLength2) - 1;\r\n  const decimalIndex = Math.min(decimalIndex1, decimalIndex2);\r\n\r\n  if (decimalDifference < 0) {\r\n    pad1 = pad1.padEnd(decimalIndex1 + decimalLength, '0');\r\n    pad2 = pad2.padEnd(decimalIndex + decimalLength, '0');\r\n  }\r\n\r\n  if (decimalDifference > 0) {\r\n    pad1 = pad1.padEnd(decimalIndex + decimalLength - 1, '0');\r\n    pad2 = pad2.padEnd(decimalIndex2 + decimalLength, '0');\r\n  }\r\n\r\n  return {\r\n    number1: pad1,\r\n    number2: pad2,\r\n    exponent: Math.max(decimalLength, 0)\r\n  };\r\n}\r\n\r\nexport function trim(number: string) {\r\n  let parts = number.split(\".\");\r\n\r\n  if (!parts[0]) parts[0] = \"0\";\r\n\r\n  while (parts[0][0] == \"0\" && parts[0].length > 1)\r\n    parts[0] = parts[0].substring(1);\r\n\r\n  return parts[0] + (parts[1] ? \".\" + parts[1] : \"\");\r\n}\r\n\r\nfunction testZero(number: string) {\r\n  return /^0[0]*[.]{0,1}[0]*$/.test(number);\r\n}\r\n","export function abs(n: number | string | bigint) {\r\n  if (typeof n == \"number\" || typeof n == \"bigint\") n = n.toString();\r\n  if (n[0] == \"-\") return n.substring(1);\r\n  return n;\r\n}\r\n","export enum RoundingModes {\r\n    /**\r\n     * Rounding mode to round towards positive infinity.\r\n     */\r\n    CEILING,\r\n\r\n    /**\r\n     * Rounding mode to round towards zero.\r\n     */\r\n    DOWN,\r\n\r\n    /**\r\n     * Rounding mode to round towards negative infinity.\r\n     */\r\n    FLOOR,\r\n\r\n    /**\r\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case round down.\r\n     */\r\n    HALF_DOWN,\r\n\r\n    /**\r\n     * Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case, round towards the even neighbor.\r\n     */\r\n    HALF_EVEN,\r\n\r\n    /**\r\n     * Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, \r\n     * in which case round up.\r\n     */\r\n    HALF_UP,\r\n\r\n    /**\r\n     * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.\r\n     * UNIMPLEMENTED\r\n     */\r\n    UNNECESSARY,\r\n\r\n    /**\r\n     * Rounding mode to round away from zero.\r\n     */\r\n    UP\r\n}\r\n\r\n","/*\r\n* Removes zero from front and back*/\r\nexport function stripTrailingZero(number: string) {\r\n\t\r\n\t// number = number.replace(/(^[-]?)([0]*)/, `${1}`);\r\n\t// number = number.replace(/([0]*$){1}/, '');\r\n\t// return number;\r\n\tconst trimStart = /^(?:[0]+)([^0.]*)/;\r\n    const trimEnd = /((?:[.][0])?[0]*)$/;\r\n\tconst isNegative = number[0] === '-';\r\n\tif (isNegative) {\r\n\t\tnumber = number.substring(1);\r\n\t}\r\n\tnumber = number.replace(trimStart, \"$1\");\r\n\t// while (number[0] == '0') {\r\n\t// \tnumber = number.replace(trimStart, \"$1\");\r\n\t// }\r\n\tif (number.indexOf('.') != -1) {\r\n\t\twhile (number[number.length - 1] == '0') {\r\n\t\t\tnumber = number.substring(0, number.length - 1);\r\n\t\t}\r\n\t\t// number = number.replace(trimEnd, \"\")\r\n\t}\r\n\tif (number == \"\" || number == \".\") {\r\n\t\tnumber = '0';\r\n\t} else if (number[number.length - 1] == '.') {\r\n\t\tnumber = number.substring(0, number.length - 1);\r\n\t}\r\n\tif (number[0] == '.') {\r\n\t\tnumber = '0' + number;\r\n\t}\r\n\tif (isNegative && number != '0') {\r\n\t\tnumber = '-' + number;\r\n\t}\r\n\treturn number;\r\n}","import { RoundingModes } from './roundingModes';\r\nimport { stripTrailingZero } from './stripTrailingZero';\r\n/**\r\n * \r\n * @param input the number to round\r\n * @param n precision\r\n * @param mode Rounding Mode\r\n */\r\nexport function roundOff(input: string, n: number = 0, mode = RoundingModes.HALF_EVEN) {\r\n    if (mode === RoundingModes.UNNECESSARY) {\r\n        let [integers, mantissa] = stripTrailingZero(input.replace('-', '')).split('.');\r\n        if (n > 0 && mantissa) {\r\n            if (mantissa.length <= n) {\r\n                return input\r\n            }\r\n            if (/[^0]/.test(mantissa.slice(n))) {\r\n                throw new Error('Number is not an exact value. Rounding necessary.')\r\n            }\r\n            return input\r\n        } else if (n < 0 && mantissa) {\r\n            throw new Error('Number is not an exact value. Rounding necessary.')\r\n        } else if (n < 0) {\r\n            if (integers.length <= Math.abs(n) || /[^0]/.test(integers.slice(n))) {\r\n                throw new Error('Number is not an exact value. Rounding necessary.')\r\n            }\r\n            return input\r\n        } else if (n == 0 && mantissa) {\r\n            throw new Error('Number is not an exact value. Rounding necessary.')\r\n        }\r\n        return input\r\n    }\r\n\r\n    let neg = false;\r\n    if (input[0] === '-') {\r\n        neg = true;\r\n        input = input.substring(1);\r\n    }\r\n\r\n    let parts = input.split('.'),\r\n        partInt = parts[0],\r\n        partDec = parts[1];\r\n\r\n    //handle case of -ve n: roundOff(12564,-2)=12600\r\n    if (n < 0) {\r\n        n = -n;\r\n        if (partInt.length <= n)\r\n            return '0';\r\n        else {\r\n            let prefix = partInt.substring(0, partInt.length - n);\r\n            input = prefix + '.' + partInt.substring(partInt.length - n) + partDec;\r\n            prefix = roundOff(input, 0, mode);\r\n            return (neg ? '-' : '') + prefix + (new Array(n + 1).join('0'));\r\n        }\r\n    }\r\n\r\n\r\n    // handle case when integer output is desired\r\n    if (n == 0) {\r\n        let l = partInt.length;\r\n        if (greaterThanFive(parts[1], partInt, neg, mode)) {\r\n            partInt = increment(partInt);\r\n        }\r\n        return (neg && parseInt(partInt) ? '-' : '') + partInt;\r\n    }\r\n\r\n\r\n    // handle case when n>0\r\n    if (!parts[1]) {\r\n        return (neg ? '-' : '') + partInt + '.' + (new Array(n + 1).join('0'));\r\n    } else if (parts[1].length < n) {\r\n        return (neg ? '-' : '') + partInt + '.' + parts[1] + (new Array(n - parts[1].length + 1).join('0'));\r\n    }\r\n\r\n    partDec = parts[1].substring(0, n);\r\n    let rem = parts[1].substring(n);\r\n\r\n    if (rem && greaterThanFive(rem, partDec, neg, mode)) {\r\n        partDec = increment(partDec);\r\n        if (partDec.length > n) {\r\n            return (neg ? '-' : '') + increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\r\n        }\r\n    }\r\n    return (neg && (parseInt(partInt) || parseInt(partDec)) ? '-' : '') + partInt + '.' + partDec;\r\n}\r\n\r\nfunction greaterThanFive(part: string, pre: string, neg: boolean, mode: RoundingModes) {\r\n    if (!part || part == ''.padEnd(part.length, '0'))\r\n        return false;\r\n\r\n    // #region UP, DOWN, CEILING, FLOOR \r\n    if (mode === RoundingModes.DOWN || (!neg && mode === RoundingModes.FLOOR) ||\r\n        (neg && mode === RoundingModes.CEILING))\r\n        return false;\r\n\r\n    if (mode === RoundingModes.UP || (neg && mode === RoundingModes.FLOOR) ||\r\n        (!neg && mode === RoundingModes.CEILING))\r\n        return true;\r\n    // #endregion\r\n\r\n    // case when part !== five\r\n    let five = '5'.padEnd(part.length, '0');\r\n    if (part > five)\r\n        return true;\r\n    else if (part < five)\r\n        return false;\r\n\r\n    // case when part === five\r\n    switch (mode) {\r\n        case RoundingModes.HALF_DOWN: return false;\r\n        case RoundingModes.HALF_UP: return true;\r\n        case RoundingModes.HALF_EVEN:\r\n        default: return (parseInt(pre[pre.length - 1]) % 2 == 1)\r\n    }\r\n}\r\n\r\nfunction increment(part, c: number = 0) {\r\n    if (!c)\r\n        c = 1;\r\n    if (typeof (part) == 'number')\r\n        part.toString();\r\n\r\n    let l = part.length - 1,\r\n        s = '';\r\n\r\n    for (let i = l; i >= 0; i--) {\r\n        let x = parseInt(part[i]) + c;\r\n        if (x == 10) {\r\n            c = 1; x = 0;\r\n        } else {\r\n            c = 0;\r\n        }\r\n        s = x + s;\r\n    }\r\n    if (c)\r\n        s = c + s;\r\n\r\n    return s\r\n}","import { pad } from './add';\r\nimport { stripTrailingZero } from './stripTrailingZero';\r\n\r\nexport function compareTo(number1: string, number2: string) {\r\n\tlet negative = '';\r\n\r\n\t[number1, number2] = [number1, number2].map(n => stripTrailingZero(n));\r\n\r\n\t// Early escapes\r\n\r\n\t// If num 1 is negative and num 2 is positive\r\n\tif (number1[0] == '-' && number2[0] != \"-\") return -1;\r\n\r\n\t// If num 2 is negative and num 1 is positive\r\n\tif (number1[0] != '-' && number2[0] == '-') return 1;\r\n\r\n\t// If num 1 and num 2 are negative\r\n\tif (number1[0] == '-' && number2[0] == '-') {\r\n\t\tnumber1 = number1.substring(1);\r\n\t\tnumber2 = number2.substring(1);\r\n\t\tnegative = '-';\r\n\t};\r\n\r\n\t({ number1, number2 } = pad(number1, number2));\r\n\r\n\tif (number1.length > number2.length) return parseInt(negative + '1');\r\n\tif (number1.length < number2.length) return (negative) ? 1 : -1;\r\n\r\n\tconst n1 = BigInt(negative + number1)\r\n\tconst n2 = BigInt(negative + number2)\r\n\tif(n1 < n2) return -1;\r\n\tif(n1 > n2) return 1;\r\n\treturn 0;\r\n}\r\n\r\n// Wrapper functions\r\n\r\nexport function lessThan(left: string, right: string, orEquals: boolean = false) {\r\n\treturn (orEquals) ? (compareTo(left, right) <= 0) : (compareTo(left, right) < 0)\r\n}\r\n\r\nexport function greaterThan(left: string, right: string, orEquals: boolean = false) {\r\n\treturn (orEquals) ? (compareTo(left, right) >= 0) : (compareTo(left, right) > 0)\r\n}\r\n\r\nexport function equals(left: string, right: string) {\r\n\treturn (compareTo(left, right) == 0)\r\n}\r\n\r\nexport function isExatclyZero(number: string) {\r\n\treturn /^0[0]*[.]{0,1}[0]*$/.test(number);\r\n}\r\n\r\nexport function isExatclyOne(number: string) {\r\n\treturn /^[0]*[1](?:[.]{1}[0]*)?$/.test(number);\r\n}\r\n\r\nexport function isEven(number: string) {\r\n\tif (number.includes('.')) return /[02468]{1}$/.test(number[number.indexOf('.') - 1])\r\n\treturn /[02468]{1}$/.test(number[number.length - 1])\r\n}\r\n\r\nexport function isOdd(number: string) {\r\n\tif (number.includes('.')) return /[13579]{1}$/.test(number[number.indexOf('.') - 1]);\r\n\treturn /[13579]{1}$/.test(number[number.length - 1])\r\n}","import { isExatclyZero } from \"./compareTo\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\"\r\n\r\nexport function multiply(number1: string, number2: string) {\r\n\tlet negativeNumber1 = '';\r\n\tlet negativeNumber2 = '';\r\n\tlet negativeResult = '';\r\n\r\n\tif (number1[0] == '-') {\r\n\t\tnumber1 = number1.substring(1);\r\n\t\tnegativeNumber1 = '-';\r\n\t}\r\n\tif (number2[0] == '-') {\r\n\t\tnumber2 = number2.substring(1);\r\n\t\tnegativeNumber2 = '-';\r\n\t}\r\n\r\n\tif(isExatclyZero(number1) || isExatclyZero(number2)) return '0';\r\n\r\n\tnumber1 = stripTrailingZero(number1);\r\n\tnumber2 = stripTrailingZero(number2);\r\n\r\n\tlet decimalLength1 = 0;\r\n\tlet decimalLength2 = 0;\r\n\r\n\tif (number1.indexOf('.') + 1) {\r\n\t\tdecimalLength1 = number1.length - number1.indexOf('.') - 1;\r\n\t}\r\n\r\n\tif (number2.indexOf('.') + 1) {\r\n\t\tdecimalLength2 = number2.length - number2.indexOf('.') - 1;\r\n\t}\r\n\r\n\tlet decimalLength = decimalLength1 + decimalLength2;\r\n\tnumber1 = negativeNumber1 + stripTrailingZero(number1.replace('.', ''));\r\n\tnumber2 = negativeNumber2 + stripTrailingZero(number2.replace('.', ''));\r\n\r\n\tlet result = (BigInt(number1) * BigInt(number2)).toString();\r\n\r\n\tif (result[0] == '-') {\r\n\t\tresult = result.substring(1);\r\n\t\tnegativeResult = '-';\r\n\t}\r\n\r\n\tif (decimalLength > 0) {\r\n\t\tdecimalLength = result.length - decimalLength;\r\n\t\tif (decimalLength < 0) {\r\n\t\t\tresult = result.padStart(result.length + Math.abs(decimalLength), '0');\r\n\t\t\tdecimalLength = 0;\r\n\t\t}\r\n\r\n\t\tresult = (result.slice(0, decimalLength) || '0') + '.' + result.slice(decimalLength);\r\n\t}\r\n\r\n\treturn stripTrailingZero(negativeResult + result);\r\n}\r\n","import { abs } from './abs';\r\nimport { roundOff } from './round';\r\n\r\nexport function divide(dividend: string, divisor: string, precission: number = 8) {\r\n\r\n    // Return 0 \r\n    if (divisor == '0') {\r\n        return '0' + (!precission) ? '' : '.' + new Array(precission).join('0');\r\n    }\r\n\r\n    // precission = precission + 2;\r\n    let negativeDividend: string = '';\r\n    let negativeDivisor: string = '';\r\n    let negativeResult: string = '';\r\n    let dividendIndex = dividend.length;\r\n    let divisorIndex = divisor.length;\r\n    let resultIndex = 0;\r\n\r\n    const findNegativeOffset = /^(?:[0]+)(?:[.])([0]+)(?:\\d+)/;\r\n    const trimStart = /^(?:[0]+)([^0.]*)/;\r\n    const trimEnd = (n: string) => {\r\n        while (n[n.length - 1] == '0') {\r\n            if(n[n.length - 1] == '.'){\r\n                n = n.substring(0, n.length - 1);\r\n                break;\r\n            }\r\n\t\t\tn = n.substring(0, n.length - 1);\r\n\t\t}\r\n        return n;\r\n    }\r\n\r\n    //check for negatives\r\n    if (dividend[0] == '-') {\r\n        dividend = dividend.substring(1);\r\n        negativeDividend = '-'\r\n        dividendIndex--;\r\n    }\r\n\r\n    if (divisor[0] == '-') {\r\n        divisor = divisor.substring(1);\r\n        negativeDivisor = '-';\r\n        divisorIndex--;\r\n    }\r\n\r\n    if (negativeDividend !== negativeDivisor) negativeResult = '-';\r\n\r\n    if (divisor == '1') {\r\n        return negativeResult + dividend;\r\n    }\r\n\r\n    if (dividend.includes('.')) {\r\n        dividend = trimEnd(dividend)\r\n        if (dividend.includes('.')) {\r\n            if (findNegativeOffset.test(dividend))\r\n                dividendIndex = -(dividend.replace(findNegativeOffset, '$1').length)\r\n            else if (dividend[0] == '0')\r\n                dividendIndex = dividend.indexOf('.') - 1\r\n            else dividendIndex = dividend.indexOf('.');\r\n            dividend = dividend.substring(0, dividend.indexOf('.')) + dividend.substring(dividend.indexOf('.') + 1);\r\n        } else dividendIndex = dividend.length;\r\n    }\r\n\r\n    if (divisor.includes('.')) {\r\n        divisor = trimEnd(divisor)\r\n        if (divisor.includes('.')) {\r\n            if (findNegativeOffset.test(divisor))\r\n                divisorIndex = -(divisor.replace(findNegativeOffset, '$1').length)\r\n            else if (divisor[0] == '0')\r\n                divisorIndex = divisor.indexOf('.') - 1\r\n            else divisorIndex = divisor.indexOf('.');\r\n            divisor = divisor.substring(0, divisor.indexOf('.')) + divisor.substring(divisor.indexOf('.') + 1);\r\n        } else divisorIndex = divisor.length;\r\n    }\r\n\r\n    resultIndex = dividendIndex - divisorIndex;\r\n\r\n    const dividendInt = BigInt(dividend);\r\n    const divisorInt = BigInt(divisor);\r\n    const precisionInt = BigInt('1'.padEnd(Math.max(dividend.length, divisor.length) + precission + 2, '0'));\r\n\r\n    dividend = dividend.replace(trimStart, \"$1\");\r\n    divisor = divisor.replace(trimStart, \"$1\");\r\n\r\n    const intDifference = dividend.length - divisor.length;\r\n    const paddingInt = BigInt('1'.padEnd(Math.abs(intDifference) + 1, '0'));\r\n\r\n    let result = ((dividendInt * precisionInt) / divisorInt).toString();\r\n    // console.log('resultIndex', resultIndex)\r\n    // console.log('intDifference', intDifference)\r\n\r\n    if (resultIndex == 0) {\r\n        let intBasis = intDifference > 0;\r\n\r\n        if (intBasis && dividendInt >= (divisorInt * paddingInt)) {\r\n            resultIndex++\r\n        } else if (!intBasis && (dividendInt * paddingInt) >= divisorInt) {\r\n            resultIndex++\r\n        } else if (dividendInt == divisorInt) {\r\n            resultIndex++\r\n        }\r\n        return roundOff(negativeResult + (result.substring(0, resultIndex) || '0') + '.' + result.substring(resultIndex), precission)\r\n    }\r\n\r\n    if (intDifference > 0) {\r\n        if (Math.sign(dividendIndex) == Math.sign(divisorIndex) && dividendInt >= (divisorInt * paddingInt))\r\n            resultIndex++\r\n        else if (Math.sign(dividendIndex) >= 0 && dividendInt >= (divisorInt * paddingInt))\r\n            resultIndex++\r\n        else if (resultIndex < 0 && dividendInt >= (divisorInt * paddingInt)) resultIndex++;\r\n    } else {\r\n        if ((dividendInt * paddingInt) >= divisorInt) resultIndex++;\r\n    }\r\n\r\n    if (resultIndex > 0) {\r\n        return roundOff(negativeResult + (result.substring(0, resultIndex) || '0') + '.' + result.substring(resultIndex), precission);\r\n    }\r\n\r\n    return roundOff(negativeResult + '0.'.padEnd(Math.abs(resultIndex) + 2, '0') + result, precission);\r\n\r\n}","import { add } from './add';\r\n\r\nexport function subtract(number1: string, number2: string) {\r\n\treturn add(number1, negate(number2));\r\n}\r\n\r\nexport function negate(number : string){\r\n\treturn (number[0] == '-')? number.substring(1): '-' + number;\r\n}","import { abs } from \"./abs\";\r\nimport { greaterThan, isExatclyZero, lessThan } from \"./compareTo\";\r\n\r\nexport function validateInteger(number: string, label?: string) {\r\n    if (number.includes('.')) {\r\n        throw Error(`${(label)?`[${label}]: `:''}Non-integers not supported`);\r\n    }\r\n}\r\n\r\nexport function validatePositive(number: string, label?: string) {\r\n    if (number[0] == '-') {\r\n        throw Error(`${(label)?`[${label}]: `:''}Negatives not supported`);\r\n    }\r\n}\r\n\r\nexport function validateGTZero(number: string, label?: string) {\r\n    if (lessThan(number, '0', true)) {\r\n        throw Error(`${(label)?`[${label}]: `:''}Argument x must be greater than 0`);\r\n    }\r\n}\r\n\r\nexport function validateIsInRange(number: string, label?: string) {\r\n    if (greaterThan(abs(number), '1')) {\r\n        throw Error(`${(label)?`[${label}]: `:''}Argument x is out of range`);\r\n    }\r\n}\r\n\r\nexport function validateDivideByZero(number: string, label?: string) {\r\n    if (isExatclyZero(number)) {\r\n        throw Error(`${(label)?`[${label}]: `:''}Cannot divide by 0`);\r\n    }\r\n}\r\n\r\nexport function validateArray(array: string[], label?: string) {\r\n    if (array.length === 0) {\r\n        throw Error(`${(label)?`[${label}]: `:''}Empty array`);\r\n    }\r\n}","import { divide } from './divide';\r\nimport { roundOff } from './round';\r\nimport { multiply } from './multiply';\r\nimport { negate, subtract } from './subtract';\r\nimport { RoundingModes } from './roundingModes';\r\nimport { abs } from './abs';\r\nimport { validateDivideByZero } from './validators';\r\nimport { stripTrailingZero } from './stripTrailingZero';\r\n\r\nexport function modulusE(n: string, base: string = '1', precision: number = 64) {\r\n    validateDivideByZero(base, 'modulus');\r\n    return stripTrailingZero(roundOff(subtract(n, multiply(base, roundOff(divide(n, base, precision + 1), 0, RoundingModes.FLOOR))), precision));\r\n}\r\n\r\nexport function modulus(n: string, base: string = '1', precision: number = 64) {\r\n    validateDivideByZero(base, 'modulus');\r\n    const result = modulusE(abs(n), abs(base), precision);\r\n    return stripTrailingZero((n.includes('-')) ? negate(result) : result);\r\n}\r\n\r\n\r\n","import { abs } from \"./abs\";\r\nimport { add } from \"./add\";\r\nimport { greaterThan, isExatclyOne, isExatclyZero, lessThan } from \"./compareTo\";\r\nimport { divide } from \"./divide\";\r\nimport { multiply } from \"./multiply\";\r\nimport { roundOff } from \"./round\";\r\nimport { RoundingModes } from \"./roundingModes\";\r\nimport { subtract } from \"./subtract\";\r\nimport { validateInteger } from \"./validators\";\r\n\r\nexport function tolerance(precision: number | string) {\r\n    precision = precision.toString();\r\n    validateInteger(precision.toString());\r\n    if (isExatclyZero(precision)) return '0';\r\n    if (precision[0] == '-') return '1'.padEnd(Number(abs(precision)) + 1, '0');\r\n    return '0.'.padEnd(Number(abs(precision)) + 1, '0') + '1';\r\n}\r\n\r\nexport function isAproxZero(number: string | number, precision: number = 8) {\r\n    precision = Math.max(1, precision);\r\n    number = abs(number.toString());\r\n    if (isExatclyZero(number)) return true;\r\n    if (lessThan(number, tolerance(precision - 1), true)) return true;\r\n    return false;\r\n}\r\n\r\nexport function isAproxOne(number: string, percision: number = 8) {\r\n    percision = Math.max(1, percision)\r\n    number = abs(number);\r\n\r\n    if (isExatclyOne(number)) return true;\r\n    if (lessThan(abs(subtract('1', number)), tolerance(percision - 1), true)) return true;\r\n\r\n    return false;\r\n}\r\n\r\nexport function sign(number: string) {\r\n    if (isExatclyZero(number)) return 0;\r\n    return (number[0] == '-') ? -1 : 1;\r\n}\r\n\r\nexport function testTolerance(target: string, precision: number) {\r\n    return (RegExp(`^([0]{1}\\\\.[0]{${precision + 2},}[\\\\d]{1})`).test(target) || target == '0');\r\n}\r\n\r\nexport function min(numbers: string[]) {\r\n    if (numbers.length === 0) throw Error('[Min]: Empty array.');\r\n    if (numbers.length === 1) return numbers[0];\r\n    return numbers.reduce((prev, curr) => {\r\n        if (lessThan(prev, curr, true)) return prev;\r\n        return curr;\r\n    }, numbers[0]);\r\n}\r\n\r\nexport function max(numbers: string[]) {\r\n    if (numbers.length === 0) throw Error('[max]: Empty array.');\r\n    if (numbers.length === 1) return numbers[0];\r\n    return numbers.reduce((prev, curr) => {\r\n        if (greaterThan(prev, curr, true)) return prev;\r\n        return curr;\r\n    }, numbers[0]);\r\n}\r\n\r\nexport function clamp(n: string, x: string = '0', y: string = '1') {\r\n    return min([y, max([x, n])]);\r\n}\r\n\r\nexport function step(number: string, step: string = number) {\r\n    return multiply(roundOff(divide(number, step), 0, RoundingModes.FLOOR), step);\r\n}\r\n\r\nexport function lerp(x: string, y: string, a: string = '1') {\r\n    return add(multiply(x, subtract('1', a)), multiply(y, a));\r\n};\r\n\r\nexport function invlerp(x: string, y: string, a: string) {\r\n    return clamp(divide(subtract(a, x), subtract(y, x)));\r\n};\r\n\r\nexport function random(length: number = 32) {\r\n    length = Math.max(length, 32);\r\n\r\n    const n = crypto.getRandomValues(new Uint32Array(length));\r\n    let digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n    let r = '.'\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const p = crypto.getRandomValues(new Uint32Array(10));\r\n        let c = 10;\r\n\r\n        while (c != 0) {\r\n            let i = Math.floor((p[c - 1] / 4294967296) * c);\r\n            c--;\r\n            [digits[c - 1], digits[i]] = [digits[i], digits[c - 1]];\r\n        }\r\n        r += digits[Math.floor((n[i] / 4294967296) * 10)];\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n","import { abs } from \"./abs\";\r\nimport { equals, greaterThan, isEven, isExatclyOne, isExatclyZero, isOdd, lessThan } from \"./compareTo\";\r\nimport { divide } from \"./divide\";\r\nimport { multiply } from \"./multiply\";\r\nimport { roundOff } from \"./round\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\";\r\nimport { negate as negateFn, subtract } from \"./subtract\";\r\nimport { add } from \"./add\";\r\nimport { testTolerance, tolerance } from \"./utils\";\r\nimport { RoundingModes } from \"./roundingModes\";\r\nimport { validateInteger } from \"./validators\";\r\nimport { ln2 } from \"./logarithm\";\r\n\r\n/**\r\n * Calculates the power of a given base raised to an integer exponent\r\n * \r\n * @param base - Base number\r\n * @param exponent - Exponent integer\r\n * @param negate - If set to true, parameters will be evaluated as `-(x ^ n)`\r\n * \r\n * @returns The resulting power as a string\r\n * \r\n * \r\n * @example Basic usage:\r\n * ```\r\n * // Positive Base\r\n * console.log(pow(2,2)) // Prints '4'\r\n * // Negative Base\r\n * console.log(pow(-2,2)) // Prints '4'\r\n * // Negative Base where the result will be a negative number\r\n * console.log(pow(-2,3)) // Prints '-8'\r\n * ```\r\n * \r\n * @example Negation usage:\r\n * ```\r\n * // Positive Base\r\n * console.log(pow(2, 2, true)) // Prints '-4'\r\n * // Negative Base\r\n * console.log(pow(-2, 2, true)) // Prints '-4'\r\n * // Negative Base where the result will be a negative number\r\n * console.log(pow(-2, 3, true)) // Prints '8'\r\n * ```\r\n * \r\n * @example Special cases:\r\n * ```\r\n * // Exponent of 0\r\n * console.log(pow(2, 0)) // Prints '1'\r\n * // Exponent of 1\r\n * console.log(pow(2, 1)) // Prints '2'\r\n * ```\r\n */\r\n\r\nexport function pow(base: string, exponent: string, precision: number = 32, negate: boolean = false): string {\r\n\r\n    if (isExatclyZero(exponent)) {\r\n        return '1'\r\n    }\r\n\r\n    if (!exponent.includes('-') && isExatclyOne(exponent)) {\r\n        return base\r\n    }\r\n\r\n    if (isExatclyZero(base) && exponent.includes('-') && isExatclyOne(abs(exponent))) {\r\n        throw Error('0^(-1) is undefined');\r\n    }\r\n\r\n    const finalize = (result: string) => {\r\n        result = (negativeExponent) ? divide('1', result, precision + 1) : result;\r\n        result = (precision) ? roundOff(result, precision) : result;\r\n        return (negate) ? stripTrailingZero(negateFn(result)) : stripTrailingZero(result);\r\n    };\r\n\r\n    const negativeBase = base.includes('-');\r\n\r\n    const negativeExponent = exponent.includes('-');\r\n    const exponentParts = exponent.split('.');\r\n    const exponentSignificand = exponentParts[1];\r\n\r\n    let fractionalExponent = '1';\r\n    let result: string = '1';\r\n\r\n    if (equals(abs(base), '10') && !exponentSignificand) {\r\n        result = tolerance(negateFn(exponentParts[0]));\r\n        return (negativeBase) ? '-' + result : result;\r\n    } else {\r\n        result = intPow(base, abs(exponentParts[0]))\r\n    }\r\n\r\n    if (exponentSignificand) {\r\n\r\n        if (negativeBase) {\r\n            negate = !negate\r\n        }\r\n\r\n        precision = Math.max(precision, 32);\r\n        let minPrecision = base.length * Math.ceil(parseFloat(abs(exponent))) + precision;\r\n\r\n        let tempBase = abs(base);\r\n\r\n        for (let i = 0; i < exponentSignificand.length; i++) {\r\n            if (isOdd(exponentSignificand[i])) {\r\n                switch (exponentSignificand[i]) {\r\n                    case '9':\r\n                        fractionalExponent = multiply(fractionalExponent, multiply(intPow(nthRoot(tempBase, '5', minPrecision + i + 1), '2'), nthRoot(tempBase, '2', minPrecision + i + 1))) // (2 * 2) + 5 = 9\r\n                        break;\r\n                    case '7':\r\n                        fractionalExponent = multiply(fractionalExponent, multiply(nthRoot(tempBase, '5', minPrecision + i + 1), nthRoot(tempBase, '2', minPrecision + i + 1))) // 2 + 5 = 7\r\n                        break;\r\n                    case '5':\r\n                        fractionalExponent = multiply(fractionalExponent, nthRoot(tempBase, '2', minPrecision + i + 1)) // 5\r\n                        break;\r\n                    case '3':\r\n                        fractionalExponent = multiply(fractionalExponent, intPow(nthRoot(tempBase, '10', minPrecision + i + 1), '3')) // 1 * 3 = 3\r\n                        break;\r\n                    case '1':\r\n                        fractionalExponent = multiply(fractionalExponent, nthRoot(tempBase, '10', minPrecision + i + 1)) // 2 / 2 = 1\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            if (isEven(exponentSignificand[i])) {\r\n                switch (exponentSignificand[i]) {\r\n                    case '8':\r\n                        fractionalExponent = multiply(fractionalExponent, intPow(nthRoot(tempBase, '5', minPrecision + i + 1), '4')) // 2 * 4 = 8\r\n                        break;\r\n                    case '6':\r\n                        fractionalExponent = multiply(fractionalExponent, intPow(nthRoot(tempBase, '5', minPrecision + i + 1), '3')) // 2 * 3 = 6\r\n                        break;\r\n                    case '4':\r\n                        fractionalExponent = multiply(fractionalExponent, intPow(nthRoot(tempBase, '5', minPrecision + i + 1), '2')) // 2 * 2 = 4\r\n                        break;\r\n                    case '2':\r\n                        fractionalExponent = multiply(fractionalExponent, nthRoot(tempBase, '5', minPrecision + i + 1)) // 2\r\n                        break;\r\n                    case '0':\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (i < exponentSignificand.length - 1) tempBase = nthRoot(tempBase, '10', minPrecision + i + 2);\r\n        }\r\n\r\n        // console.log(fractionalExponent)\r\n\r\n        return finalize(multiply(result, fractionalExponent));\r\n\r\n    } else {\r\n        return finalize(result);\r\n    }\r\n\r\n};\r\n\r\nexport function intPow(base: string, exponent: string) {\r\n\r\n    validateInteger(exponent, 'intPow exponent');\r\n\r\n    exponent = abs(exponent);\r\n\r\n    let negative = '';\r\n\r\n    exponent = abs(exponent);\r\n\r\n    if (base[0] == '-') {\r\n        base = base.substring(1);\r\n        negative = (isEven(exponent)) ? '' : '-';\r\n    }\r\n\r\n    let decimalIndex = base.indexOf('.');\r\n    let decimalLength = 0;\r\n\r\n    if (decimalIndex >= 0) {\r\n        base = base.replace('.', '');\r\n        decimalLength = (base.length - decimalIndex) * parseInt(exponent);\r\n    }\r\n\r\n    let result = (BigInt(base) ** BigInt(exponent)).toString();\r\n\r\n    if (decimalLength) {\r\n        result = (result.substring(0, result.length - decimalLength) || '0') + '.' + result.substring(result.length - decimalLength).padStart(decimalLength, '0')\r\n    }\r\n\r\n    return negative + result\r\n\r\n}\r\n\r\nexport function nthRoot(x: string, n: string, precision = 16) {\r\n\r\n    x = x.toString();\r\n    n = n.toString();\r\n\r\n    validateInteger(n, 'nthRoot n');\r\n\r\n    const initialGuess = () => {\r\n        let _x = BigInt(roundOff(x));\r\n        let _n = BigInt(n);\r\n        let _guess = 1n;\r\n\r\n        while (_x > _n) {\r\n            _x = _x >> _n\r\n            _guess = _guess << 1n;\r\n        }\r\n\r\n        return _guess.toString();\r\n    }\r\n\r\n\r\n    let guess = initialGuess();\r\n    let nMinusOne = subtract(n, '1');\r\n    let difference = '0'\r\n    let lastDifference = abs(x)\r\n    let i = 4;\r\n\r\n    while (true) {\r\n        let newGuess = stripTrailingZero(divide(add(stripTrailingZero(divide(x, intPow(guess, nMinusOne), precision + i + 2)), multiply(guess, nMinusOne)), n, precision + i + 1));\r\n        difference = stripTrailingZero(abs(subtract(guess, newGuess)))\r\n        // console.log(newGuess)\r\n        // console.log(difference)\r\n\r\n        if (greaterThan(difference, lastDifference)) {\r\n            return stripTrailingZero(roundOff(bisectionRoot(x, n, newGuess, precision + i), precision));\r\n        }\r\n\r\n        if (testTolerance(difference, precision + i)) {\r\n            return stripTrailingZero(roundOff(newGuess, precision))\r\n        }\r\n\r\n        lastDifference = difference;\r\n        guess = stripTrailingZero(newGuess);\r\n\r\n        i++;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function bisectionRoot(x: string, n: string, g: string, precision = 32) {\r\n\r\n    const f0 = (v: string, n: string, x: string) => {\r\n        return stripTrailingZero(subtract(intPow(v, n), x));\r\n    }\r\n\r\n    const f1 = (x: string, n: string) => {\r\n        return stripTrailingZero(multiply(n, intPow(x, subtract(n, '1'))));\r\n    }\r\n\r\n    // const threshold = tolerance(precision)\r\n    let left = negateFn(g);\r\n    let right = g;\r\n    let v = '0';\r\n    let prevV0 = '0';\r\n    let i = 4;\r\n\r\n    while (true) {\r\n        v = stripTrailingZero(divide(add(left, right), '2', precision + i));\r\n        let v0 = f0(v, n, x);\r\n        const v1 = f1(v, n);\r\n        if (lessThan(multiply(v0, v1), '0', true)) {\r\n            left = stripTrailingZero(v);\r\n        } else {\r\n            right = stripTrailingZero(v);\r\n        }\r\n\r\n        v0 = abs(v0);\r\n\r\n        // console.log(v)\r\n\r\n        if (testTolerance(v0, precision) || equals(v0, prevV0)) {\r\n            return stripTrailingZero(v);\r\n        }\r\n        // console.log(v)\r\n\r\n        prevV0 = v0\r\n        i++;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function inverseSqRoot(x: string, precision = 32) {\r\n    x = abs(x);\r\n\r\n    const initialGuess = () => {\r\n        let _x = BigInt(roundOff(x));\r\n        let n = 1n;\r\n\r\n        while (_x > 2n) {\r\n            _x = _x >> 1n;\r\n            n = n + 1n;\r\n        }\r\n        return stripTrailingZero(pow('2', '-' + stripTrailingZero(divide(n.toString(), '2', precision + 8)), precision + 8));\r\n    }\r\n\r\n    let guess = (greaterThan(x, '2'))?initialGuess(): '1';\r\n    let difference = '0';\r\n    // let lastDifference = x;\r\n\r\n    while (true) {\r\n        let newGuess = roundOff(multiply(guess, subtract('1.5', roundOff(multiply(multiply(x, '.5'), multiply(guess, guess)), precision + 8))), precision + 4)\r\n\r\n        difference = abs(subtract(guess, newGuess))\r\n\r\n        if (testTolerance(difference, precision)) {\r\n            return stripTrailingZero(roundOff(guess, precision))\r\n        }\r\n\r\n        // lastDifference = difference;\r\n        guess = newGuess;\r\n    }\r\n\r\n}\r\n\r\nexport function sqRoot(x: string, precision = 32) {\r\n    precision = Math.max(precision, 32);\r\n    return stripTrailingZero(roundOff(multiply(x, inverseSqRoot(x, precision + 4)), precision));\r\n}\r\n\r\nexport function cbRoot(base: string, precision = 32) {\r\n    precision = Math.max(precision, 32);\r\n    return stripTrailingZero(nthRoot(base, '3', precision));\r\n}\r\n\r\nexport function root4(base: string, precision = 32) {\r\n    precision = Math.max(precision, 32);\r\n    return stripTrailingZero(nthRoot(base, '4', precision));\r\n}\r\n\r\nexport function root5(base: string, precision = 32) {\r\n    precision = Math.max(precision, 32);\r\n    return stripTrailingZero(nthRoot(base, '5', precision));\r\n}\r\n\r\nexport function root10(base: string, precision = 32) {\r\n    precision = Math.max(precision, 32);\r\n    return stripTrailingZero(nthRoot(base, '10', precision));\r\n}\r\n\r\n\r\n","export const E = '2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210682'\r\n\r\nexport const LN2 = '0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707516350759619307275708283714351903070386238916734711233501153644979552391204751726815749320651555247341395258829504530070953263666426541042391578149520437404303855008019441706416715186447128399681717845469570262716310645461502572074024816377733896385506952606683411372738737229289564935470257626520988596932019650585547647033067936544325476327449512504060694381471046899465062201677204245245296126879465461931651746813926725041038025462596568691441928716082938031727143677826548775664850856740776484514644399404614226031930967354025744460703080960850474866385231381816767514386674766478908814371419854942315199735488037516586127535291661000710535582498794147295092931138971559982056543928717000721808576102523688921324497138932037843935308877482597017155910708823683627589842589185353024363421436706118923678919237231467232172053401649256872747782344535347648114941864238677677441';\r\nexport const LN2_L = '0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707516350759619307275708283714351903070386238916734711233501153644979552391204751726815749320651555247341395258829504530070953263666426541042391578149520437404303855008019441706416715186447128399681717845469570262716310645461502572074024816377733896385506952606683411372738737229289564935470257626520988596932019650585547647033067936544325476327449512504060694381471046899465062201677204245245296126879465461931651746813926725041038025462596568691441928716082938031727143677826548775664850856740776484514644399404614226031930967354025744460703080960850474866385231381816767514386674766478908814371419854942315199735488037516586127535291661000710535582498794147295092931138971559982056543928717000721808576102523688921324497138932037843935308877482597017155910708823683627589842589185353024363421436706118923678919237231467232172053401649256872747782344535347648114941864238677677441';\r\n\r\nexport const LOG2E = '1.4426950408889634073599246810018921374266459541529859341354494069311092191811850798855266228935063444969975183096525442555931016871683596427206621582234793362745373698847184936307013876635320155338943189166648376431286154240474784222894979047950915303513385880549688658930969963680361105110756308441454272158283449418919339085777157900441712802468483413745226951823690112390940344599685399061134217228862780291580106300619767624456526059950737532406256558154759381783052397255107248130771562675458075781713301935730061687619373729826758974156238179835671034434897506807055180884865613868329177321829349139684310593454022025186369345262692150955971910022196792243214334244941790714551184993859212216753653113007746327672064612337411082119137944333984805793109128776096702003757589981588518061267880997609562525078410248470569007687680584613278654747820278086594620609107490153248199697305790152723247872987409812541000334486875738223647164945447537067167595899428099818267834901316666335348036789869446887091166604973537292585';\r\nexport const LOG2E_L = '1.4426950408889634073599246810018921374266459541529859341354494069311092191811850798855266228935063444969975183096525442555931016871683596427206621582234793362745373698847184936307013876635320155338943189166648376431286154240474784222894979047950915303513385880549688658930969963680361105110756308441454272158283449418919339085777157900441712802468483413745226951823690112390940344599685399061134217228862780291580106300619767624456526059950737532406256558154759381783052397255107248130771562675458075781713301935730061687619373729826758974156238179835671034434897506807055180884865613868329177321829349139684310593454022025186369345262692150955971910022196792243214334244941790714551184993859212216753653113007746327672064612337411082119137944333984805793109128776096702003757589981588518061267880997609562525078410248470569007687680584613278654747820278086594620609107490153248199697305790152723247872987409812541000334486875738223647164945447537067167595899428099818267834901316666335348036789869446887091166604973537292585';\r\n\r\nexport const LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';\r\n\r\nexport const LOG10E = '0.4342944819032518276511289189166050822943970058036665661144537831658646492088707747292249493384317483187061067447663037336416792871589639065692210646628122658521270865686703295933708696588266883311636077384905142844348666768646586085135561482123487653435434357317253835622281395603048646652366095539377356176323431916710991411597894962993512457934926357655469077671082419150479910989674900103277537653570270087328550951731440674697951899513594088040423931518868108402544654089797029863286828762624144013457043546132920600712605104028367125954846287707861998992326748439902348171535934551079475492552482577820679220140931468164467381030560475635720408883383209488996522717494541331791417640247407505788767860971099257547730046048656049515610057985741340272675201439247917970859047931285212493341197329877226463885350226083881626316463883553685501768460295286399391633510647555704050513182342988874882120643595023818902643317711537382203362634416478397146001858396093006317333986134035135741787144971453076492968331392399810609';\r\n\r\n// 3.14... radians or 180 degrees\r\nexport const PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788'\r\n\r\n// 6.28... radians or 360 degrees\r\nexport const PI2 = '6.2831853071795864769252867665590057683943387987502116419498891846156328125724179972560696506842341359642961730265646132941876892191011644634507188162569622349005682054038770422111192892458979098607639288576219513318668922569512964675735663305424038182912971338469206972209086532964267872145204982825474491740132126311763497630418419256585081834307287357851807200226610610976409330427682939038830232188661145407315191839061843722347638652235862102370961489247599254991347037715054497824558763660238982596673467248813132861720427898927904494743814043597218874055410784343525863535047693496369353388102640011362542905271216555715426855155792183472743574429368818024499068602930991707421015845593785178470840399122242580439217280688363196272595495426199210374144226999999967459560999021194634656321926371900489189106938166052850446165066893700705238623763420200062756775057731750664167628412343553382946071965069808575109374623191257277647075751875039155637155610643424536132260038557532223918184328403978761905144021309717265576'\r\n\r\n// 4.56... radians or 270 degrees\r\nexport const PI3_DIV_2_H = '4.7123889803846898576939650749192543262957540990626587314624168884617246094293134979420522380131756019732221297699234599706407669143258733475880391121927216761754261540529077816583394669344234323955729466432164634989001691927134723506801747479068028637184728503851905229156814899723200904108903737119105868805099094733822623222813814442438811375730465518388855400169957958232306997820762204279122674141495859055486393879296382791760728989176896576778221116935699441243510278286290873368419072745179236947505100436609849646290320924195928371057860532697914155541558088257644397651285770122277015041076980008521907178953412416786570141366844137604557680822026613518374301452198243780565761884195338883853130299341681935329412960516272397204446621569649407780608170249999975594670749265895975992241444778925366891830203624539637834623800170275528928967822565150047067581293298812998125721309257665037209553973802356431332030967393442958235306813906279366727866707982568402099195028918149167938638246302984071428858015982287949182'\r\nexport const PI3_DIV_2_M = '4.71238898038468985769396507491925432629575409906265873146241688846172460942931349794205223801317560197322212976992345997064076691432587334758803911219272167617542615405290778165833946693442343239557294664321646349890016919271347235068017474790680286371847285038519052291568148997232009041089037371191058688050990947338226232228138144424388113757304655183888554001699579582323069978207622042791226741414958590554863938792963827917607289891768965767782211169356994412435102782862908733684190727451792369475051004366'\r\nexport const PI3_DIV_2_L = '4.71238898038468985769396507491925432629575409906265873146241688846172460942931349794205223801317560197322212976992345997064076691'\r\n\r\n// 1.62... radians or 90 degrees\r\nexport const PI_DIV_2_H = '1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745649168366812203283215430106974731976123685953510899304718513852696085881465883761923374092338347025660002840635726317804138928856713788948045868185893607342204506124767150732747926855253961398446294617710099780560645109804320172090799068148873856549802593536056749999991864890249755298658664080481592975122297276734541513212611541266723425176309655940855050015689193764432937666041907103085888345736517991267452143777343655797814319411768937968759788909288902660856134033065009639383055979546082100994690476286005327429316394'\r\nexport const PI_DIV_2_M = '1.57079632679489661923132169163975144209858469968755291048747229615390820314310449931401741267105853399107404325664115332354692230477529111586267970406424055872514205135096926055277982231147447746519098221440548783296672306423782411689339158263560095457282428346173017430522716332410669680363012457063686229350330315779408744076046048141462704585768218394629518000566526527441023326069207347597075580471652863518287979597654609305869096630589655255927403723118998137478367594287636244561396909150597456491683668122'\r\nexport const PI_DIV_2_L = '1.57079632679489661923132169163975144209858469968755291048747229615390820314310449931401741267105853399107404325664115332354692230'\r\n\r\nexport const PI_DIV_4 = '0.7853981633974483096156608458198757210492923498437764552437361480769541015715522496570087063355292669955370216283205766617734611523876455579313398520321202793625710256754846302763899111557372387325954911072027439164833615321189120584466957913178004772864121417308650871526135816620533484018150622853184311467516515788970437203802302407073135229288410919731475900028326326372051166303460367379853779023582643175914398979882730465293454831529482762796370186155949906873918379714381812228069845457529872824584183406101641607715053487365988061842976755449652359256926348042940732941880961687046169173512830001420317863158902069464428356894474022934092946803671102253062383575366373963427626980699223147308855049890280322554902160086045399534074436928274901296768028374999995932445124877649329332040240796487561148638367270756606305770633361712588154827970427525007844596882216468833020953551542944172868258995633726071888671827898907159705884468984379894454644451330428067016532504819691527989773041050497345238143002663714658197'\r\n","import { add } from \"./add\";\r\nimport { compareTo, equals, isExatclyOne, isExatclyZero, isOdd } from \"./compareTo\";\r\nimport { E } from \"./constants\";\r\nimport { divide } from \"./divide\";\r\nimport { multiply } from \"./multiply\";\r\nimport { intPow, sqRoot } from \"./pow\";\r\nimport { roundOff } from \"./round\";\r\nimport { subtract } from \"./subtract\";\r\nimport { max } from \"./utils\";\r\nimport { validateArray, validateInteger, validatePositive } from \"./validators\";\r\n\r\nexport function mean(numbers: string[]): string {\r\n    validateArray(numbers, 'mean');\r\n    if (numbers.length === 1) return numbers[0];\r\n    return divide(numbers.reduce((prev, curr) => {\r\n        return add(prev, curr);\r\n    }, '0'), numbers.length.toString());\r\n};\r\n\r\nexport function median(numbers: string[]): string {\r\n    validateArray(numbers, 'median');\r\n    if (numbers.length === 1) return numbers[0];\r\n\r\n    const n = numbers.length.toString();\r\n    numbers = numbers.sort((a, b) => compareTo(a, b));\r\n\r\n    if (isOdd(n)) return numbers[parseInt(subtract(divide(add(n, '1'), '2', 0), '1'))];\r\n\r\n    let n0 = numbers[parseInt(subtract(divide(n, '2'), '1'))];\r\n    let n1 = numbers[parseInt(divide(n, '2'))];\r\n    return divide(add(n0, n1), '2');\r\n};\r\n\r\nexport function mode(numbers: string[], last: boolean = false) {\r\n    validateArray(numbers, 'mode');\r\n    if (numbers.length === 1) return numbers[0];\r\n\r\n    numbers = numbers.sort((a, b) => compareTo(a, b));\r\n\r\n    const values: string[] = [];\r\n    const counts: string[] = [];\r\n\r\n    numbers.forEach((value) => {\r\n        let i = values.indexOf(value);\r\n        if (i === -1) {\r\n            values.push(value);\r\n            i = values.indexOf(value);\r\n            counts[i] = '0';\r\n        };\r\n        counts[i] = add(counts[i], '1');\r\n    })\r\n\r\n    let m = (last) ? counts.lastIndexOf(max(counts)) : counts.indexOf(max(counts));\r\n\r\n    return values[m];\r\n\r\n};\r\n\r\nexport function variance(numbers: string[]) {\r\n    validateArray(numbers, 'variance');\r\n    if (numbers.length === 1) return '0';\r\n\r\n    const m = mean(numbers);\r\n\r\n    numbers = numbers.map((value) => {\r\n        return intPow(subtract(value, m), '2');\r\n    })\r\n\r\n    return mean(numbers);\r\n};\r\n\r\nexport function stdDv(numbers: string[]) {\r\n    validateArray(numbers, 'stdDv');\r\n    if (numbers.length === 1) return '0';\r\n    return sqRoot(variance(numbers));\r\n};\r\n\r\nexport const factorialMemmory: string[] = ['0', '1'];\r\n\r\nexport function factorial(n: string): string {\r\n    validateInteger(n, 'factorial');\r\n    validatePositive(n, 'factorial');\r\n\r\n    if (isExatclyZero(n) || isExatclyOne(n)) {\r\n        return '1';\r\n    }\r\n\r\n    if (factorialMemmory[n]) return factorialMemmory[n];\r\n\r\n    const memmory = (factorialMemmory.length - 1).toString();\r\n    let i = BigInt(memmory);\r\n    let result = BigInt(factorialMemmory[memmory]);\r\n\r\n    while (true) {\r\n        if (i.toString() == n) return result.toString();\r\n\r\n        i++;\r\n        result = result * i\r\n        if (!factorialMemmory[i.toString()]) factorialMemmory[i.toString()] = result.toString();\r\n    }\r\n}\r\n\r\nexport function subfactorial(n: string): string {\r\n    validateInteger(n, 'subfactorial');\r\n    validatePositive(n, 'subfactorial');\r\n\r\n    if (isExatclyZero(n) || isExatclyOne(n)) return '1';\r\n\r\n    return roundOff(divide(factorial(n), E))\r\n}\r\n\r\n","import { abs } from \"./abs\";\r\nimport { add } from \"./add\";\r\nimport { equals, greaterThan, isExatclyOne, isExatclyZero } from \"./compareTo\";\r\nimport { E, LN10, LN2, LN2_L } from \"./constants\";\r\nimport { divide } from \"./divide\";\r\nimport { multiply } from \"./multiply\";\r\nimport { intPow } from \"./pow\";\r\nimport { roundOff } from \"./round\";\r\nimport { factorial } from \"./statistics\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\";\r\nimport { subtract } from \"./subtract\";\r\nimport { testTolerance } from \"./utils\";\r\nimport { validateGTZero } from \"./validators\";\r\n\r\nexport function Euler(precision: number = 64) {\r\n    precision = Math.max(16, precision)\r\n    let result = '1';\r\n    let n = '1';\r\n    let f = '1';\r\n    while (true) {\r\n        f = factorial(n);\r\n        const next = divide('1', f, precision + 3)\r\n        if (testTolerance(abs(next), precision)) {\r\n            return stripTrailingZero(roundOff(result, precision));\r\n        }\r\n        result = add(result, next);\r\n        n = add(n, '1');\r\n    }\r\n}\r\n\r\nexport function exp(exponent: string, precision: number = 32) {\r\n    exponent = stripTrailingZero(exponent);\r\n\r\n    if (isExatclyZero(exponent)) return '1';\r\n\r\n    // if (!exponent.includes('.')) {\r\n    //     let intExp = intPow(E, exponent);\r\n    //     if (exponent[0] == '-') intExp = divide('1', intExp, precision);\r\n    //     return stripTrailingZero(roundOff(intExp, precision));\r\n    // }\r\n\r\n    let result = '1';\r\n    let n = '1';\r\n    let f = '1';\r\n    while (true) {\r\n        f = factorial(n);\r\n        const next = stripTrailingZero(divide(intPow(exponent, n), f, precision + 4))\r\n        if (testTolerance(abs(next), precision + 4)) {\r\n            return stripTrailingZero(roundOff(add(result, next), precision));\r\n        }\r\n        result = add(result, next);\r\n        n = add(n, '1');\r\n    }\r\n}\r\n\r\nexport function expm1(exponent: string) {\r\n    return subtract(exp(exponent), '1')\r\n}\r\n\r\nexport function ln(x: string = '2') {\r\n    validateGTZero(x, 'ln');\r\n\r\n    if (stripTrailingZero(x) == '1') {\r\n        return '0'; // ln(1) = 0\r\n    }\r\n\r\n    // Reduce x to range [1,2)\r\n    let m = BigInt(x.split('.')[0]);\r\n    let p = 1n;\r\n    let k = 0n;\r\n\r\n    while(m > 1n){\r\n        m = m >> 1n;\r\n        p = p << 1n;\r\n        k = k + 1n;\r\n    }\r\n\r\n    x = divide(x, p.toString(), 68);\r\n\r\n    const term = stripTrailingZero(divide(subtract(x, '1'), add(x, '1'), 68));\r\n    const f = stripTrailingZero(multiply(term, term));\r\n    let t = term;\r\n    let result = '0';\r\n    let i = 1n;\r\n    while (true) {\r\n        let next = stripTrailingZero(roundOff(multiply(divide('1', i.toString(), 68 + 4), t), 68));\r\n        if (testTolerance(next, 68)) {\r\n            return stripTrailingZero(roundOff(add(multiply(k.toString(), LN2_L), multiply('2', add(result, next))), 64));\r\n        }\r\n        i = i + 2n;\r\n        t = stripTrailingZero(roundOff(multiply(t, f), 68 + 2));\r\n        result = add(result, next);\r\n    }\r\n\r\n}\r\n\r\nexport function ln2(x: string = '2') {\r\n    validateGTZero(x, 'ln2');\r\n\r\n    if (isExatclyOne(x)) {\r\n        return '0'; // ln(1) = 0\r\n    }\r\n\r\n    let result = '0';\r\n    while (greaterThan(x, '2', true)) {\r\n        x = stripTrailingZero(divide(x, '2', 68));\r\n        result = add(result, '1');\r\n    }\r\n\r\n    if (isExatclyOne(x)) return result;\r\n\r\n    return stripTrailingZero(roundOff(add(result, divide(ln(x), LN2, 68)), 64));\r\n}\r\n\r\nexport function log(base: string) {\r\n    return ln(base);\r\n}\r\n\r\nexport function log10(base: string) {\r\n    return roundOff(divide(ln(base), LN10, 68), 64);\r\n}","import { abs } from \"./abs\";\r\nimport { add } from \"./add\";\r\nimport { greaterThan, isExatclyOne, isExatclyZero, lessThan } from \"./compareTo\";\r\nimport { PI, PI2, PI3_DIV_2_L, PI_DIV_2_H, PI_DIV_2_L, PI_DIV_4 } from \"./constants\";\r\nimport { divide } from \"./divide\";\r\nimport { exp } from \"./logarithm\";\r\nimport { modulus } from \"./modulus\";\r\nimport { multiply } from \"./multiply\";\r\nimport { intPow, sqRoot } from \"./pow\";\r\nimport { roundOff } from \"./round\";\r\nimport { factorial } from \"./statistics\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\";\r\nimport { negate, subtract } from \"./subtract\";\r\nimport { sign, testTolerance, tolerance } from \"./utils\";\r\nimport { validateIsInRange } from \"./validators\";\r\n\r\n// Hypotenuse \r\nexport function hypot(a: string, b: string) {\r\n    return sqRoot(add(intPow(a, '2'), add(intPow(b, '2'))));\r\n}\r\n\r\n// Sine functions\r\nexport function sin(x: string, precision = 64) {\r\n    // const p = roundOff(multiply(PI, '2'), 132);\r\n    if (greaterThan(abs(x), PI2)) {\r\n        x = modulus(x, PI2, precision + 64);\r\n    }\r\n\r\n    let result = x;\r\n    let n = '1'; // Series iteration\r\n    let s = '-1';\r\n    let r = x;\r\n\r\n    while (true) {\r\n        r = roundOff(multiply(multiply(r, x), x),  precision + 16)\r\n        const N = add(multiply(n, '2'), '1'); // Next real term in series (even terms cancel)\r\n        const next = roundOff(multiply(s, divide(r, factorial(N), precision + 12)), precision + 8);\r\n\r\n        if (testTolerance(abs(next), precision + 4)) {\r\n            result = add(result, next);\r\n            return stripTrailingZero(roundOff(result, precision));\r\n        }\r\n\r\n        result = add(result, next);\r\n        n = add(n, '1');\r\n        s = negate(s);\r\n    }\r\n}\r\n\r\nexport function asin(x: string) {\r\n    x = stripTrailingZero(x);\r\n    validateIsInRange(x, 'asin');\r\n    if (isExatclyOne(abs(x))) return roundOff(((sign(x) == 1) ? PI_DIV_2_H : negate(PI_DIV_2_H)), 64);\r\n    if (isExatclyZero(abs(x))) return '0';\r\n    return atan(divide(x, sqRoot(subtract('1', roundOff(multiply(x,x), 76)), 72), 68));\r\n    // let result = '0';\r\n    // let n = '1';\r\n    // let u = '1';\r\n    // let v = '1';\r\n    // while (true) {\r\n\r\n    //     const N = multiply(n, '2');\r\n    //     const R = add(N, '1');\r\n\r\n    //     u = multiply(u, N);\r\n    //     v = multiply(v, subtract(N, '1'));\r\n\r\n    //     let next = divide(multiply(v, intPow(x, R)), multiply(u, R), 68);\r\n\r\n    //     if (testTolerance(next, 64)) {\r\n    //         result = add(result, next);\r\n    //         return stripTrailingZero(roundOff(add(result, x), 64));\r\n    //     }\r\n\r\n    //     result = add(result, next);\r\n\r\n    //     if (greaterThan(abs(x), '.8')) return atan(divide(x, sqRoot(subtract('1', multiply(x,x)), 72), 68));\r\n    //     n = add(n, '1');\r\n\r\n    // }\r\n}\r\n\r\n// function asinEnhanced(x: string, theta = '0') {\r\n//     console.warn(`[arcsine]: Value of ${x} is slow to calculate. Switching to alternative Newton approximation.`);\r\n\r\n//     let lower = '-' + roundOff(PI_DIV_2_H, 68);\r\n//     let upper = roundOff(PI_DIV_2_H, 68);\r\n//     let step = roundOff(PI_DIV_4, 68);\r\n//     let currentSin = sin(theta, 68);\r\n//     let previousDifference = subtract(x, currentSin);\r\n\r\n//     while (true) {\r\n//         let difference = stripTrailingZero(subtract(x, currentSin));\r\n\r\n//         if (testTolerance(abs(difference), 64)) {\r\n//             return stripTrailingZero(roundOff(theta, 64))\r\n//         }\r\n\r\n//         if (lessThan(abs(previousDifference), abs(difference))) {\r\n//             if (greaterThan(difference, '0')) {\r\n//                 lower = theta;\r\n//             } else {\r\n//                 upper = theta;\r\n//             }\r\n//             theta = divide(add(lower, upper), '2', 68);\r\n//         } else {\r\n//             const cosTheta = sqRoot(multiply(subtract('1', currentSin), add('1', currentSin)), 68);\r\n//             if (greaterThan(abs(cosTheta), tolerance(8))) {\r\n//                 theta = add(theta, divide(difference, cosTheta, 68));\r\n//             } else {\r\n//                 theta = add(theta, multiply(step, sign(difference).toString()));\r\n//             }\r\n//         }\r\n\r\n//         if (testTolerance(abs(difference), 64)) {\r\n//             return stripTrailingZero(roundOff(theta, 64));\r\n//         }\r\n\r\n//         currentSin = sin(theta, 128);\r\n//         step = multiply(abs(difference), '.5');\r\n//         previousDifference = difference;\r\n//     }\r\n\r\n// }\r\n\r\nexport function sinh(x: string) {\r\n    const e = exp(x);\r\n    return stripTrailingZero(roundOff(multiply(subtract(e, divide('1', e, 68)), '.5'), 64));\r\n    // return stripTrailingZero(roundOff(subtract(divide(exp(x), '2', 68), divide(exp(negate(x)), '2', 68)), 64));\r\n}\r\n\r\n// Cosine functions\r\n\r\nexport function cos(x: string, precision = 64) {\r\n    let negative = '';\r\n    x = modulus(x, PI2, precision + 4);\r\n    if(lessThan(PI_DIV_2_L, abs(x), true) && lessThan(abs(x), PI3_DIV_2_L)) negative = '-';\r\n\r\n    const s = sin(x, precision + 4);\r\n    return negative + sqRoot(multiply(subtract('1', s), add('1', s)), 68);\r\n}\r\n\r\nexport function acos(x: string) {\r\n    x = stripTrailingZero(x);\r\n    validateIsInRange(x, 'acos');\r\n    // return stripTrailingZero(roundOff(multiply('2', atan(sqRoot(divide(subtract('1', x), add('1', x), 72), 68))), 64));\r\n    return stripTrailingZero(roundOff(subtract(PI_DIV_2_H, asin(x)), 64));\r\n}\r\n\r\nexport function cosh(x: string) {\r\n    return stripTrailingZero(roundOff(divide(add(exp(x), exp(negate(x))), '2', 68), 64));\r\n}\r\n\r\n// Tangant functions\r\n\r\nexport function tan(x: string) {\r\n    const {s, c} = cosAndSin(x, 68);\r\n    return stripTrailingZero(roundOff(divide(s, c, 68), 64));\r\n}\r\n\r\nexport function atan(x: string) {\r\n\r\n    let i = 1;\r\n\r\n    while(greaterThan(abs(x),'.05')){\r\n        x = divide(x, add('1', sqRoot(add('1', roundOff(multiply(x,x), 76)), 72)), 68);\r\n        i = i << 1;\r\n    }\r\n    \r\n    const q = multiply(x,x);\r\n    let result = '0';\r\n    let p = x;\r\n    let n = 1n;\r\n    let s = '1';\r\n    while (true) {\r\n        let next = divide(roundOff(multiply(s, p), 72), n.toString(), 68)\r\n        if (testTolerance(abs(next), 64)) {\r\n            return stripTrailingZero(roundOff(multiply((i).toString(), add(result, next)), 64));\r\n        }\r\n        result = add(result, next);\r\n        n = n + 2n;\r\n        p = roundOff(multiply(p, q), 76);\r\n        s = negate(s);\r\n    }\r\n}\r\n\r\nexport function atan2(y: string, x: string) {\r\n    let offset = '0';\r\n\r\n    if (isExatclyZero(x) && isExatclyZero(y)) {\r\n        return '0';\r\n    }\r\n\r\n    if (isExatclyZero(x) && greaterThan(y, '0')) {\r\n        return stripTrailingZero(roundOff(PI_DIV_2_H, 64));\r\n    }\r\n\r\n    if (isExatclyZero(x) && lessThan(y, '0')) {\r\n        return stripTrailingZero(roundOff(negate(PI_DIV_2_H), 64));\r\n    }\r\n\r\n    if (lessThan(x, '0')) {\r\n        offset = (greaterThan(y, '0', true)) ? PI : negate(PI);\r\n    }\r\n\r\n    return stripTrailingZero(roundOff(add(atan(divide(y, x, 68)), offset), 64));\r\n\r\n}\r\n\r\nexport function tanh(x: string) {\r\n    return stripTrailingZero(roundOff(divide(sinh(x), cosh(x), 68), 64));\r\n}\r\n\r\nfunction cosAndSin(x: string, precision = 64) {\r\n    let negative = '';\r\n    x = modulus(x, PI2, precision + 4);\r\n    if(lessThan(PI_DIV_2_L, abs(x), true) && lessThan(abs(x), PI3_DIV_2_L)) negative = '-';\r\n\r\n    const s = sin(x, precision + 4);\r\n    const c = negative + sqRoot(multiply(subtract('1', s), add('1', s)), 68);\r\n\r\n    return {s,c}\r\n}","import { add, trim } from \"./add\";\r\nimport { abs } from \"./abs\";\r\nimport { roundOff } from \"./round\";\r\nimport { multiply } from \"./multiply\";\r\nimport { divide } from \"./divide\";\r\nimport { modulus, modulusE } from \"./modulus\";\r\nimport { compareTo, equals, greaterThan, lessThan } from \"./compareTo\";\r\nimport { subtract, negate } from \"./subtract\";\r\nimport { RoundingModes as Modes, RoundingModes } from \"./roundingModes\";\r\nimport { stripTrailingZero } from \"./stripTrailingZero\";\r\nimport { cbRoot, pow, sqRoot } from \"./pow\";\r\nimport { clamp, invlerp, lerp, max, min, random, sign, step } from \"./utils\";\r\nimport { acos, asin, atan, atan2, cos, cosh, hypot, sin, sinh, tan, tanh } from \"./trig\";\r\nimport { log, ln2, log10, exp, expm1 } from \"./logarithm\";\r\nimport { E, LN10, LN2, LOG2E, LOG10E, PI, PI2, PI_DIV_2_H, PI_DIV_4 } from \"./constants\";\r\nimport { factorial, mean, median, mode, stdDv, subfactorial, variance } from \"./statistics\";\r\n\r\nclass bigDecimal {\r\n  private value: string;\r\n  static RoundingModes = Modes;\r\n  private static validate(number: number | string | bigint ): string {\r\n    if (number) {\r\n      number = number.toString();\r\n      if (isNaN(Number(number))) throw Error(\"Parameter is not a number: \" + number);\r\n      if (number[0] == \"+\") number = number.substring(1);\r\n    } else number = \"0\";\r\n\r\n    //handle missing leading zero\r\n    if (number.startsWith(\".\")) number = \"0\" + number;\r\n    else if (number.startsWith(\"-.\")) number = \"-0\" + number.substring(1);\r\n\r\n    //handle exponentiation (scientific notation)\r\n    if (/e/i.test(number)) {\r\n      let [mantisa, exponent] = number.split(/[eE]/);\r\n      let exponentIndex = Number(exponent)\r\n      mantisa = trim(mantisa);\r\n      let sign = \"\";\r\n      if (mantisa[0] == \"-\") {\r\n        sign = \"-\";\r\n        mantisa = mantisa.substring(1);\r\n      }\r\n\r\n      if (mantisa.indexOf(\".\") >= 0) {\r\n        exponentIndex = parseInt(exponent) + mantisa.indexOf(\".\");\r\n        mantisa = mantisa.replace(\".\", \"\");\r\n      } else {\r\n        exponentIndex = parseInt(exponent) + mantisa.length;\r\n      }\r\n\r\n      if (mantisa.length < exponentIndex) {\r\n        number =\r\n          sign + mantisa + new Array(exponentIndex - mantisa.length + 1).join(\"0\");\r\n      } else if (mantisa.length >= exponentIndex && exponentIndex > 0) {\r\n        number =\r\n          sign +\r\n          trim(mantisa.substring(0, exponentIndex)) +\r\n          (mantisa.length > exponentIndex ? \".\" + mantisa.substring(exponentIndex) : \"\");\r\n      } else {\r\n        number = sign + \"0.\" + new Array(-exponentIndex + 1).join(\"0\") + mantisa;\r\n      }\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  constructor(number: number | string | bigint = \"0\") {\r\n    this.value = bigDecimal.validate(number);\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  setValue(num: number | string | bigint) {\r\n    this.value = bigDecimal.validate(num);\r\n  }\r\n\r\n  static getPrettyValue(number, digits = 3, separator = \",\"): string {\r\n    // if (!(digits || separator)) {\r\n    //     digits = 3;\r\n    //     separator = ',';\r\n    // } else if (!(digits && separator)) {\r\n    //     throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\r\n    // }\r\n    number = bigDecimal.validate(number);\r\n    let neg = number.charAt(0) == \"-\";\r\n    if (neg) number = number.substring(1);\r\n    var len = number.indexOf(\".\");\r\n    len = len > 0 ? len : number.length;\r\n    var temp = \"\";\r\n    for (var i = len; i > 0; ) {\r\n      if (i < digits) {\r\n        digits = i;\r\n        i = 0;\r\n      } else i -= digits;\r\n\r\n      temp =\r\n        number.substring(i, i + digits) +\r\n        (i < len - digits && i >= 0 ? separator : \"\") +\r\n        temp;\r\n    }\r\n    return (neg ? \"-\" : \"\") + temp + number.substring(len);\r\n  }\r\n  getPrettyValue(digits = 3, separator = \",\") {\r\n    return bigDecimal.getPrettyValue(this.value, digits, separator);\r\n  }\r\n\r\n  static round(number, precision = 0, mode = Modes.HALF_EVEN): string {\r\n    number = bigDecimal.validate(number);\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n    return roundOff(number, precision, mode);\r\n  }\r\n\r\n  round(precision = 0, mode = Modes.HALF_EVEN) {\r\n    if (isNaN(precision))\r\n      throw Error(\"Precision is not a number: \" + precision);\r\n\r\n    return new bigDecimal(roundOff(this.value, precision, mode));\r\n  }\r\n\r\n  static abs(number): string {\r\n    number = bigDecimal.validate(number);\r\n    return abs(number);\r\n  }\r\n\r\n  abs() {\r\n    return new bigDecimal(abs(this.value));\r\n  }\r\n\r\n  static floor(number): string {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  floor() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.FLOOR);\r\n  }\r\n\r\n  static ceil(number): string {\r\n    number = bigDecimal.validate(number);\r\n    if (number.indexOf(\".\") === -1) return number;\r\n    return bigDecimal.round(number, 0, RoundingModes.CEILING);\r\n  }\r\n\r\n  ceil() {\r\n    if (this.value.indexOf(\".\") === -1) return new bigDecimal(this.value);\r\n    return new bigDecimal(this.value).round(0, RoundingModes.CEILING);\r\n  }\r\n\r\n  static add(number1, number2): string {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return add(number1, number2);\r\n  }\r\n\r\n  add(number: bigDecimal) {\r\n    return new bigDecimal(add(this.value, number.getValue()));\r\n  }\r\n\r\n  static subtract(number1, number2): string {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return subtract(number1, number2);\r\n  }\r\n\r\n  subtract(number: bigDecimal) {\r\n    return new bigDecimal(subtract(this.value, number.getValue()));\r\n  }\r\n\r\n  static multiply(number1, number2): string {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return multiply(number1, number2);\r\n  }\r\n\r\n  multiply(number: bigDecimal) {\r\n    return new bigDecimal(multiply(this.value, number.getValue()));\r\n  }\r\n\r\n  static divide(number1, number2, precision?: number): string {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return divide(number1, number2, precision);\r\n  }\r\n\r\n  divide(number: bigDecimal, precision?: number) {\r\n    return new bigDecimal(divide(this.value, number.getValue(), precision));\r\n  }\r\n\r\n  static modulus(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return modulus(number1, number2);\r\n  }\r\n\r\n  modulus(number: bigDecimal) {\r\n    return new bigDecimal(modulus(this.value, number.getValue()));\r\n  }\r\n\r\n  static modulusE(number1, number2) {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return modulusE(number1, number2);\r\n  }\r\n\r\n  modulusE(number: bigDecimal) {\r\n    return new bigDecimal(modulusE(this.value, number.getValue()));\r\n  }\r\n\r\n  static negate(number) {\r\n    number = bigDecimal.validate(number);\r\n    return negate(number);\r\n  }\r\n\r\n  negate() {\r\n    return new bigDecimal(negate(this.value));\r\n  }\r\n\r\n  // Powers\r\n\r\n  static pow(base: number|string, exponent: number|string, precision: number = 32): string {\r\n    base = bigDecimal.validate(base);\r\n    exponent = bigDecimal.validate(exponent);\r\n    return pow(base, exponent, precision);\r\n  }\r\n\r\n  pow(exponent: bigDecimal) {\r\n    return new bigDecimal(pow(this.value, exponent.getValue(), 32));\r\n  }\r\n\r\n  // Roots\r\n\r\n  static get SQRT1_2(): string {\r\n    return sqRoot('.5');\r\n  }\r\n\r\n  static get SQRT2(): string {\r\n    return sqRoot('2');\r\n  }\r\n\r\n  static sqRoot(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return sqRoot(number);\r\n  }\r\n\r\n  sqRoot(): bigDecimal {\r\n    return new bigDecimal(sqRoot(this.value));\r\n  }\r\n\r\n  static cbRoot(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return cbRoot(number);\r\n  }\r\n\r\n  cbRoot(): bigDecimal {\r\n    return new bigDecimal(cbRoot(this.value));\r\n  }\r\n\r\n  // Logarithms\r\n\r\n  static readonly E = E\r\n  static readonly LN2 = LN2\r\n  static readonly LN10 = LN10\r\n  static readonly LOG2E = LOG2E\r\n  static readonly LOG10E = LOG10E\r\n\r\n  static log2(number: number|string): string{\r\n    number = bigDecimal.validate(number);\r\n    return ln2(number)\r\n  }  \r\n\r\n  static log10(number: number|string): string{\r\n    number = bigDecimal.validate(number);\r\n    return log10(number)\r\n  }\r\n\r\n  static log1p(number: number|string): string{\r\n    number = bigDecimal.validate(number);\r\n    return log(add('1', number))\r\n  }\r\n\r\n  static log(number: number|string): string{\r\n    number = bigDecimal.validate(number);\r\n    return log(number)\r\n  }\r\n\r\n  static exp(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return exp(number);\r\n  }\r\n\r\n  static expm1(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return expm1(number)\r\n  }\r\n\r\n  // Trig\r\n  static readonly PI = PI;\r\n  static readonly PI2 = PI2;\r\n  static readonly PI_DIV_2 = PI_DIV_2_H;\r\n  static readonly PI_DIV_4 = PI_DIV_4;\r\n\r\n  static hypot(a: number|string, b: number|string): string{\r\n    a = bigDecimal.validate(a);\r\n    b = bigDecimal.validate(b);\r\n\r\n    return hypot(a,b);\r\n\r\n  }\r\n\r\n  static sin(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return sin(number);\r\n  }\r\n\r\n  static sinh(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return sinh(number);\r\n  }\r\n\r\n  static asin(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return asin(number);\r\n  }\r\n\r\n  static cos(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return cos(number);\r\n  }\r\n\r\n  static cosh(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return cosh(number);\r\n  }\r\n\r\n  static acos(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return acos(number);\r\n  }\r\n\r\n  static tan(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return tan(number);\r\n  }\r\n\r\n  static tanh(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return tanh(number);\r\n  }\r\n\r\n  static atan(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return atan(number);\r\n  }\r\n\r\n  static atan2(y: number|string, x: number|string): string {\r\n    x = bigDecimal.validate(x);\r\n    y = bigDecimal.validate(y);\r\n    return atan2(y, x);\r\n  }\r\n\r\n  // Statistics\r\n\r\n  static mean(numbers: number[]|string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return mean(numbers);\r\n  }\r\n\r\n  static median(numbers: number[]|string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return median(numbers);\r\n  }\r\n\r\n  static mode(numbers: number[]|string[], last: boolean = false): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return mode(numbers, last);\r\n  }\r\n\r\n  static variance(numbers: number[]|string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return variance(numbers);\r\n  }\r\n\r\n  static stdDv(numbers: number[]|string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return stdDv(numbers);\r\n  }\r\n\r\n  static factorial(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return factorial(number);\r\n  }\r\n  \r\n  static subfactorial(number: number|string): string {\r\n    number = bigDecimal.validate(number);\r\n    return subfactorial(number);\r\n  }\r\n\r\n  // Comparisons\r\n  static compareTo(number1: number|string, number2: number|string): number {\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return compareTo(number1, number2);\r\n  }\r\n\r\n  compareTo(number: bigDecimal): number {\r\n    return compareTo(this.value, number.getValue());\r\n  }\r\n\r\n  static equals(number1: number|string, number2: number|string): boolean{\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return equals(number1, number2);\r\n  }\r\n\r\n  equals(number: bigDecimal): boolean{\r\n    return equals(this.value, number.getValue());\r\n  }\r\n\r\n  static lt(number1: number|string, number2: number|string): boolean{\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return lessThan(number1, number2);\r\n  }\r\n\r\n  lt(number: bigDecimal): boolean{\r\n    return lessThan(this.value, number.getValue());\r\n  }\r\n\r\n  static leq(number1: number|string, number2: number|string): boolean{\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return lessThan(number1, number2, true);\r\n  }\r\n\r\n  leq(number: bigDecimal): boolean{\r\n    return lessThan(this.value, number.getValue(), true);\r\n  }\r\n\r\n  static gt(number1: number|string, number2: number|string): boolean{\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return greaterThan(number1, number2);\r\n  }\r\n\r\n  gt(number: bigDecimal): boolean{\r\n    return greaterThan(this.value, number.getValue());\r\n  }\r\n\r\n  static geq(number1: number|string, number2: number|string): boolean{\r\n    number1 = bigDecimal.validate(number1);\r\n    number2 = bigDecimal.validate(number2);\r\n    return greaterThan(number1, number2, true);\r\n  }\r\n\r\n  geq(number: bigDecimal): boolean{\r\n    return greaterThan(this.value, number.getValue(), true);\r\n  }\r\n\r\n  static sign(number: number|string): number{\r\n    number = bigDecimal.validate(number);\r\n    return sign(number);\r\n  }\r\n\r\n  sign(): number{\r\n    return sign(this.value);\r\n  }\r\n\r\n  // Misc.\r\n\r\n  static min(numbers: string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return min(numbers);\r\n  }\r\n\r\n  static max(numbers: string[]): string {\r\n    numbers = numbers.map(number => bigDecimal.validate(number));\r\n    return max(numbers);\r\n  }\r\n\r\n  static clamp(number: string, min:string = '0', max:string = '1'): string {\r\n    number = bigDecimal.validate(number);\r\n    min = bigDecimal.validate(min);\r\n    max = bigDecimal.validate(max);\r\n    return clamp(number, min, max);\r\n  }\r\n\r\n  clamp(min:bigDecimal = new bigDecimal('0'), max:bigDecimal = new bigDecimal('1')){\r\n    return new bigDecimal(clamp(this.value, min.value, max.value));\r\n  }\r\n\r\n  static step(number: string, s: string = number): string{\r\n    number = bigDecimal.validate(number);\r\n    s = bigDecimal.validate(s);\r\n    return step(number, s);\r\n  }\r\n\r\n  static lerp(x: string, y: string, a: string = '1'): string{\r\n    x = bigDecimal.validate(x);\r\n    y = bigDecimal.validate(y);\r\n    a = bigDecimal.validate(a);\r\n    return lerp(x, y, a);\r\n  }\r\n\r\n  static invlerp(x: string, y: string, a: string = x): string{\r\n    x = bigDecimal.validate(x);\r\n    y = bigDecimal.validate(y);\r\n    a = bigDecimal.validate(a);\r\n    return invlerp(x, y, a);\r\n  }\r\n\r\n  static stripTrailingZero(number): string {\r\n    number = bigDecimal.validate(number);\r\n    return stripTrailingZero(number);\r\n  }\r\n  \r\n  static random(length: number = 32): string {\r\n    return random(length);\r\n  }\r\n\r\n  stripTrailingZero() {\r\n    return new bigDecimal(stripTrailingZero(this.value));\r\n  }\r\n\r\n\r\n}\r\nexport default bigDecimal;\r\n"],"names":["negate","negateFn","Modes"],"mappings":"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"}