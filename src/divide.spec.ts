import bigDecimal from "./big-decimal";
import { RoundingModes } from "./roundingModes";
const divide = bigDecimal.divide;

describe("divide", function () {
  it("test failing scenario", function () {
    expect(divide("509365950.27576", "0.003802940215600348", 16)).toBe(
      "133940036234.6609666927392804"
    );
  });
  xit("STRESS TEST - should return correct result", function () {
    let count = 2000,
      err = 0;
    while (count-- > 0) {
      let dividend: any = (
        Math.random() * Math.pow(10, Math.floor(Math.random() * 10))
      ).toFixed(5);
      let divisor: any =
        Math.random() * Math.pow(10, Math.floor(Math.random() * 10));
      if (divisor == 0) {
        count++;
        continue;
      }
      let jsOut = dividend / divisor;
      let myOut = parseFloat(
        divide(dividend.toString(), divisor.toString(), 5)
      );
      if (isNaN(myOut) || Math.abs(jsOut - myOut) > 0.00001) {
        console.log(`${dividend}/${divisor} = ${jsOut} != ${myOut}`);
        err++;
      } else {
        //console.log(`${dividend}/${divisor} = ${jsOut} == ${myOut}`);
      }
    }
    expect(err).toBe(0);
  });
  it("should do basic integer division", function () {
    expect(divide(1234, 12, 2)).toBe("102.83");
  });
  it("should do basic floating point division", function () {
    expect(divide(12.34, 12, 2)).toBe("1.03");
  });
  it("should do basic floating point division", function () {
    expect(divide(29629629362962961839.48344234, 12345678901234567890, 2)).toBe(
      "2.40"
    );
  });
  it("should do basic floating point division", function () {
    expect(
      divide(

        "1000",
        10
      )
    ).toBe(

    );
  });
  it("should do basic floating point division", function () {
    expect(divide(45, -4, 2)).toBe("-11.25");
  });
  it("should do basic floating point division", function () {
    expect(divide(-45, -4, 2)).toBe("11.25");
  });
  it("1 / 25 = 0.04", function () {
    expect(divide("1", "25", 2)).toBe("0.04");
  });
  it("-1 / 25 = -0.04", function () {
    expect(divide("-1", "25", 2)).toBe("-0.04");
  });
  it("1 / -25 = -0.04", function () {
    expect(divide("1", "-25", 2)).toBe("-0.04");
  });
  it("-1 / -25 = 0.04", function () {
    expect(divide("-1", "-25", 2)).toBe("0.04");
  });
  it("-1 / -1 = 1", function () {
    expect(divide("-1", "-1", 0)).toBe("1");
  });
  it("10.8 / 10 = 1.08", function () {
    expect(divide("10.8", "10")).toBe("1.08000000");
  });
  it("10.8 / 100 = 0.108", function () {
    expect(divide("10.8", "100")).toBe("0.10800000");
  });
  it("10.8 / 1000 = 0.0108", function () {
    expect(divide("10.8", "1000")).toBe("0.01080000");
  });
  it("10.8 / 10000 = 0.00108", function () {
    expect(divide("10.8", "10000")).toBe("0.00108000");
  });
  it("2.00 / 0.5 = 4.00", function () {
    expect(divide("2.00", "0.5", 2)).toBe("4.00");
  });
  it("0.11005 / 0.1 = 1.1005", function () {
    expect(divide("0.11005", "0.1", 4)).toBe("1.1005");
  });
  it("123456789.123456 / .0123456 = 10000063919.40902022", function () {
    expect(divide("123456789.123456", ".0123456")).toBe("10000063919.40902022");
  });
  it(".102 / .0383292 = 2.66115651", function () {
    expect(divide(".102", ".0383292", 8)).toBe("2.66115651");
  });
  it("division of 27.999972 by 128 with precision of 10 should return 0.2187497812", function() {
    expect(divide(27.999972, 128, 10)).toBe("0.2187497812");
  })
  it("division of 27.999972 by 128 with precision of 10 and rounded by HALF_UP mode should return 0.2187497813", function() {
    expect(divide(27.999972, 128, 10, RoundingModes.HALF_UP)).toBe("0.2187497813");
  })
});
