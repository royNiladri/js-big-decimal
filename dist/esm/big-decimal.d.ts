import { RoundingModes as Modes } from "./roundingModes";
declare class bigDecimal {
    private value;
    static RoundingModes: typeof Modes;
    private static validate;
    constructor(number?: number | string | bigint);
    getValue(): string;
    setValue(num: number | string | bigint): void;
    static getPrettyValue(number: any, digits?: number, separator?: string): string;
    getPrettyValue(digits?: number, separator?: string): string;
    static round(number: any, precision?: number, mode?: Modes): string;
    round(precision?: number, mode?: Modes): bigDecimal;
    static abs(number: any): string;
    abs(): bigDecimal;
    static floor(number: any): any;
    floor(): bigDecimal;
    static ceil(number: any): any;
    ceil(): bigDecimal;
    static add(number1: any, number2: any): string;
    add(number: bigDecimal): bigDecimal;
    static subtract(number1: any, number2: any): string;
    subtract(number: bigDecimal): bigDecimal;
    static multiply(number1: any, number2: any): string;
    multiply(number: bigDecimal): bigDecimal;
    static divide(number1: any, number2: any, precision?: number): string;
    divide(number: bigDecimal, precision?: number): bigDecimal;
    static modulus(number1: any, number2: any): string;
    modulus(number: bigDecimal): bigDecimal;
    static modulusE(number1: any, number2: any): string;
    modulusE(number: bigDecimal): bigDecimal;
    static negate(number: any): string;
    negate(): bigDecimal;
    static pow(base: number | string, exponent: number | string): string;
    pow(exponent: bigDecimal): bigDecimal;
    static get SQRT1_2(): string;
    static get SQRT2(): string;
    static sqRoot(number: number | string): string;
    sqRoot(): bigDecimal;
    static cbRoot(number: number | string): string;
    cbRoot(): bigDecimal;
    static get E(): string;
    static get LN2(): string;
    static get LN10(): string;
    static get LOG2E(): string;
    static get LOG10E(): string;
    static log2(number: number | string): string;
    static log10(number: number | string): string;
    static log1p(number: number | string): string;
    static log(number: number | string): string;
    static exp(number: number | string): string;
    static expm1(number: number | string): string;
    static hypot(a: number | string, b: number | string): string;
    static sin(number: number | string): string;
    static sinh(number: number | string): string;
    static asin(number: number | string): string;
    static cos(number: number | string): string;
    static cosh(number: number | string): string;
    static acos(number: number | string): string;
    static tan(number: number | string): string;
    static tanh(number: number | string): string;
    static atan(number: number | string): string;
    static atan2(y: number | string, x: number | string): string;
    static compareTo(number1: number | string, number2: number | string): 0 | 1 | -1;
    compareTo(number: bigDecimal): 0 | 1 | -1;
    static equals(number1: number | string, number2: number | string): boolean;
    equals(number: bigDecimal): boolean;
    static lt(number1: number | string, number2: number | string): boolean;
    lt(number: bigDecimal): boolean;
    static leq(number1: number | string, number2: number | string): boolean;
    leq(number: bigDecimal): boolean;
    static gt(number1: number | string, number2: number | string): boolean;
    gt(number: bigDecimal): boolean;
    static geq(number1: number | string, number2: number | string): boolean;
    geq(number: bigDecimal): boolean;
    static sign(number: number | string): 0 | 1 | -1;
    sign(): 0 | 1 | -1;
    static factorial(number: number | string): string;
    static stripTrailingZero(number: any): string;
    stripTrailingZero(): bigDecimal;
}
export default bigDecimal;
